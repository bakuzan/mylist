"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mylist",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload","angularMoment"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("animeitems"),ApplicationConfiguration.registerModule("characters"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("favourites"),ApplicationConfiguration.registerModule("history"),ApplicationConfiguration.registerModule("mangaitems"),ApplicationConfiguration.registerModule("ratings"),ApplicationConfiguration.registerModule("statistics"),ApplicationConfiguration.registerModule("tasks"),ApplicationConfiguration.registerModule("users"),angular.module("animeitems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Animeitems","animeitems","dropdown","/animeitems(/create)?"),Menus.addSubMenuItem("topbar","animeitems","List Animeitems","animeitems"),Menus.addSubMenuItem("topbar","animeitems","New Animeitem","animeitems/create")}]),angular.module("animeitems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAnimeitems",{url:"/animeitems",templateUrl:"modules/animeitems/views/list-animeitems.client.view.html"}).state("createAnimeitem",{url:"/animeitems/create",templateUrl:"modules/animeitems/views/create-animeitem.client.view.html"}).state("viewAnimeitem",{url:"/animeitems/:animeitemId",templateUrl:"modules/animeitems/views/view-animeitem.client.view.html"}).state("editAnimeitem",{url:"/animeitems/:animeitemId/edit",templateUrl:"modules/animeitems/views/edit-animeitem.client.view.html"})}]),angular.module("animeitems").controller("AnimeitemsController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","fileUpload","$sce","$window","ItemService","ListService","NotificationFactory","AnimeFactory",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,fileUpload,$sce,$window,ItemService,ListService,NotificationFactory,AnimeFactory){function getAnime(value){console.log("getting",$scope.filterConfig.ongoingList),$scope.animeitems=Animeitems.query({status:value})}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="animeitem",$scope.isLoading=!0,$scope.pageConfig={currentPage:0,pageSize:10},$scope.filterConfig={ongoingList:!0,showingCount:0,expandFilters:!1,sortType:"",sortReverse:!0,ratingLevel:void 0,ratingActions:{maxRating:10,percent:void 0,overStar:null},search:{},searchTags:"",tagsForFilter:[],taglessItem:!1,areTagless:!1,selectListOptions:ListService.getSelectListOptions($scope.whichController),statTags:ItemService.buildStatTags($scope.animeitems,0),commonArrays:ListService.getCommonArrays()},$scope.itemUpdate=(new Date).toISOString().substring(0,10),$scope.start=$scope.itemUpdate,$scope.latest=$scope.itemUpdate,$scope.episodes=0,$scope.viewItemHistory=!1,$scope.finalNumbers=!1,$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.$watchCollection("animeitems",function(){void 0!==$scope.animeitems&&(console.log($scope.animeitems),$scope.filterConfig.areTagless=ListService.checkForTagless($scope.animeitems),$scope.filterConfig.statTags=ItemService.buildStatTags($scope.animeitems,0))}),$scope.create=function(){var animeitem=new Animeitems;animeitem=new Animeitems({title:this.title,episodes:this.episodes,start:this.start,latest:this.latest,finalEpisode:this.finalEpisode,season:this.season===!0?ItemService.convertDateToSeason(new Date(this.start)):"",disc:this.disc,manga:void 0!==this.manga&&null!==this.manga?this.manga._id:this.manga,tags:$scope.tagArray,user:this.user}),animeitem.$save(function(response){$location.path("/animeitems/"+response._id),NotificationFactory.success("Saved!","Anime was saved successfully"),$scope.title="",$scope.episodes="",$scope.start="",$scope.latest="",$scope.status="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message,NotificationFactory.error("Error!",errorResponse.data.message)})},$scope.remove=function(animeitem){NotificationFactory.confirmation(function(){if(animeitem){animeitem.$remove();for(var i in $scope.animeitems)$scope.animeitems[i]===animeitem&&$scope.animeitems.splice(i,1)}else $scope.animeitem.$remove(function(){$location.path("animeitems")});NotificationFactory.warning("Deleted!","Anime was successfully deleted.")})},$scope.update=function(){var animeitem=$scope.animeitem;AnimeFactory.update(animeitem,$scope.tagArray,$scope.updateHistory,$scope.imgPath)},$scope.tickOff=function(item){item.episodes+=1,item.latest=$scope.itemUpdate,$scope.updateHistory=!0,$scope.animeitem=item,$scope.update()},$scope.find=function(){$scope.animeitems=Animeitems.query()},$scope.findOne=function(){$scope.animeitem=Animeitems.get({animeitemId:$stateParams.animeitemId})},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.uploadFile=function(){$scope.imgPath="/modules/animeitems/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUploadAnime")},$scope.latestDate=function(latest,updated){return ItemService.latestDate(latest,updated)},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.deleteHistory=function(item,history){NotificationFactory.confirmation(function(){$scope.animeitem=ItemService.deleteHistory(item,history),$scope.update()})},$scope.itemsAvailable=function(){$scope.animeitems=void 0,$scope.filterConfig.ongoingList===!0?($scope.filterConfig.search.onHold=!1,$scope.filterConfig.search.status="",getAnime(0)):($scope.filterConfig.search.onHold="",$scope.filterConfig.search.status=!1,getAnime(1))}}]),angular.module("animeitems").directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}]).directive("listBack",function(){return function(scope,element,attrs){var url=attrs.listBack;element.css({"background-image":"url("+url+")","background-size":"50%","background-repeat":"no-repeat","background-position":"right"})}}).directive("keycuts",function(){return{restrict:"A",link:function(scope,element,attrs){scope.$on("my:keydown",function(event,e){e.altKey&&86===e.keyCode&&("list"===scope.isList?scope.isList="slider":"slider"===scope.isList?scope.isList="list":"Anime"===scope.view?scope.view="Manga":"Manga"===scope.view?scope.view="Character":"Character"===scope.view&&(scope.view="Anime"))})}}}).directive("pageControls",function(){return{restrict:"EA",replace:!0,scope:{pageConfig:"=",showingCount:"="},templateUrl:"/modules/animeitems/templates/page-controls.html",link:function(scope,elem,attrs){scope.$watch("showingCount",function(){scope.pageCount=Math.ceil(scope.showingCount/scope.pageConfig.pageSize),scope.pageConfig.currentPage>scope.pageCount-1?scope.last():scope.pageConfig.currentPage<0&&scope.first()}),scope.first=function(){scope.pageConfig.currentPage=0},scope.last=function(){scope.pageConfig.currentPage=scope.pageCount-1},scope.next=function(){scope.pageConfig.currentPage+=1},scope.prev=function(){scope.pageConfig.currentPage-=1},scope.$on("my:keydown",function(event,e){e.ctrlKey&&39===e.keyCode&&scope.pageConfig.currentPage<scope.pageCount-1?scope.next():e.ctrlKey&&37===e.keyCode&&scope.pageConfig.currentPage>0&&scope.prev()}),window.addEventListener("scroll",function(evt){var scrollTop=document.body.scrollTop,div=document.getElementById("list-paging-controls"),innerDiv=document.getElementById("list-paging-controls-inner-container"),viewportOffset=div.getBoundingClientRect(),distance_from_top=viewportOffset.top;56>distance_from_top&&(div.classList.add("paging-controls-scroll-top"),innerDiv.classList.add("paging-controls-inner-container")),(distance_from_top>55||10>scrollTop)&&(div.classList.remove("paging-controls-scroll-top"),innerDiv.classList.remove("paging-controls-inner-container"))})}}}).directive("listFilters",function(){return{restrict:"EA",replace:!0,scope:{filterConfig:"=",items:"=",page:"="},templateUrl:"/modules/animeitems/templates/list-filters.html",link:function(scope,elem,attrs){scope.filterConfig.searchTags="",scope.passTag=function(tag){-1===scope.filterConfig.searchTags.indexOf(tag)&&(scope.filterConfig.searchTags+=tag+",",scope.filterConfig.tagsForFilter=scope.filterConfig.searchTags.substring(0,scope.filterConfig.searchTags.length-1).split(","))},scope.hoveringOver=function(value){scope.filterConfig.ratingActions.overStar=value,scope.filterConfig.ratingActions.percent=100*(value/scope.filterConfig.ratingActions.maxRating)},scope.itemsAvailable=function(){scope.$parent.itemsAvailable()},scope.$watch("$parent.isList",function(newValue){void 0!==newValue&&(scope.isList=newValue)}),scope.collapseFilters=function(){console.log("collapse filters"),scope.filterConfig.expandFilters=!1}}}}),angular.module("animeitems").filter("startFrom",function(){return function(input,start){return void 0!==input?(start=+start,input.slice(start)):void 0}}).filter("ratingFilter",function(){return function(array,rating){return void 0!==array?array.filter(function(item){return item.rating===rating?item:void 0===rating?item:void 0}):void 0}}).filter("endedMonth",function(){return function(array,year,month){return array.filter(function(item){return void 0!==item.end&&null!==item.end&&item.end.substring(0,4)===year&&item.end.substr(5,2)===month?item:void 0})}}).filter("endedSeason",["moment",function(moment){return function(array,year,month){return array.filter(function(item){var num,startMonth,startYear,diff,weeks,start=moment(item.start),end=moment(item.end),pad="00";if(void 0!==item.end&&null!==item.end)if(9<item.finalEpisode&&item.finalEpisode<14){if(startMonth=(pad+(month-2)).slice(-pad.length),(item.end.substring(0,4)===year&&item.end.substr(5,2)===month||item.start.substring(0,4)===year&&item.start.substr(5,2)===startMonth)&&(diff=end.diff(start,"days"),weeks=Math.ceil(diff/7)+1,weeks>=item.episodes))return item}else if(13<item.finalEpisode&&item.finalEpisode<26&&(num=month-5>0?month-5:10,startYear=month-5>0?year:year-1,startMonth=(pad+num).slice(-pad.length),(item.end.substring(0,4)===year&&item.end.substr(5,2)===month||item.start.substring(0,4)===startYear&&item.start.substr(5,2)===startMonth)&&(diff=end.diff(start,"days"),weeks=Math.ceil(diff/7)+1,weeks>=item.episodes)))return item})}}]).filter("season",function(){return function(array,year,month){return array.filter(function(item){return void 0!==item.end&&null!==item.end&&void 0!==item.season&&null!==item.season&&item.season.year===year&&item.season.season===month?item:void 0})}}).filter("summaryYear",function(){return function(array,year,type){return array.filter(function(item){if(void 0!==item.end&&null!==item.end)if("month"===type){if(item.end.substring(0,4)===year)return item}else if("season"===type&&item.season.year===year)return item})}}),angular.module("animeitems").factory("Animeitems",["$resource",function($resource){return $resource("animeitems/:animeitemId",{animeitemId:"@_id"},{update:{method:"PUT"}})}]).factory("AnimeFactory",["Animeitems","ListService","ItemService","NotificationFactory","$location",function(Animeitems,ListService,ItemService,NotificationFactory,$location){return{update:function(item,tagArray,updateHistory,imgPath){var animeitem=item;console.log(animeitem),null!==item.manga&&void 0!==item.manga&&(animeitem.manga=item.manga._id),void 0!==tagArray&&(animeitem.tags=ListService.concatenateTagArrays(animeitem.tags,tagArray)),animeitem=ItemService.itemHistory(animeitem,updateHistory,"anime"),void 0!==imgPath&&null!==imgPath&&""!==imgPath&&(animeitem.image=imgPath),animeitem.episodes===animeitem.finalEpisode&&0!==animeitem.finalEpisode?(void 0===animeitem.end||null===animeitem.end)&&(animeitem.end=animeitem.latest.substring(0,10)):animeitem.reWatching===!1&&(animeitem.end=null),void 0!==animeitem.end&&null!==animeitem.end?(animeitem.status=!0,animeitem.onHold=!1):animeitem.status=!1,animeitem.reWatching===!0&&animeitem.episodes===animeitem.finalEpisode&&(animeitem.reWatchCount+=1,animeitem.reWatching=!1),animeitem.$update(function(){-1===window.location.href.indexOf("tasks")&&$location.path("animeitems"),NotificationFactory.success("Saved!","Anime was saved successfully")},function(errorResponse){errorResponse.data.message;NotificationFactory.error("Error!",errorResponse.data.message)})}}}]).service("fileUpload",["$http","NotificationFactory",function($http,NotificationFactory){this.uploadFileToUrl=function(file,uploadUrl){var fd=new FormData;fd.append("file",file),$http.post(uploadUrl,fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(response){NotificationFactory.success("Uploaded!","Image was saved successfully")}).error(function(err){NotificationFactory.popup("Woops!","Something went wrong! \n"+err,"error")})}}]).service("ListService",function(){this.loader=function(value){return value?!1:!0},this.numberOfPages=function(showingCount,pageSize,currentPage){var pageCount=Math.ceil(showingCount/pageSize);currentPage+1>=pageCount&&0!==pageCount&&(currentPage=pageCount-1),0!==pageCount&&0>currentPage&&(currentPage=0);var pagingDetails={currentPage:currentPage,pageCount:pageCount};return pagingDetails},this.findWithAttr=function(array,attr,value){for(var i=0;i<array.length;i+=1)if(array[i][attr]===value)return i},this.getSelectListOptions=function(controller){var self=this,selectListOptions=[];return"character"!==controller?(selectListOptions.status=[{v:"",n:"All"},{v:!1,n:"Ongoing"},{v:!0,n:"Completed"}],selectListOptions.searchName="title","animeitem"===controller?(selectListOptions.onHold=[{v:"",n:"All"},{v:!1,n:"Ongoing"},{v:!0,n:"On Hold"}],selectListOptions.sortOptions=[{v:"title",n:"Title"},{v:"episodes",n:"Episodes"},{v:"start",n:"Start date"},{v:"end",n:"End date"},{v:["latest","meta.updated"],n:"Latest"},{v:"rating",n:"Rating"}],selectListOptions.sortOption=self.findWithAttr(selectListOptions.sortOptions,"n","Latest"),selectListOptions.media=[{v:"",n:"All"},{v:!1,n:"Online"},{v:!0,n:"Disc"}],selectListOptions.mediaType="disc",selectListOptions.repeating=[{v:"",n:"All"},{v:!1,n:"Not Re-watching"},{v:!0,n:"Re-watching"}],selectListOptions.repeatType="reWatching"):"mangaitem"===controller&&(selectListOptions.sortOptions=[{v:"title",n:"Title"},{v:"chapters",n:"Chapters"},{v:"volumes",n:"Volumes"},{v:"start",n:"Start date"},{v:"end",n:"End date"},{v:["latest","meta.updated"],n:"Latest"},{v:"rating",n:"Rating"}],selectListOptions.sortOption=self.findWithAttr(selectListOptions.sortOptions,"n","Latest"),selectListOptions.media=[{v:"",n:"All"},{v:!1,n:"Online"},{v:!0,n:"Hardcopy"}],selectListOptions.mediaType="hardcopy",selectListOptions.repeating=[{v:"",n:"All"},{v:!1,n:"Not Re-reading"},{v:!0,n:"Re-reading"}],selectListOptions.repeatType="reReading")):"character"===controller&&(selectListOptions.searchName="name",selectListOptions.sortOptions=[{v:"name",n:"Name"},{v:"anime.title",n:"Anime"},{v:"manga.title",n:"Manga"},{v:"voice",n:"Voice"}],selectListOptions.sortOption=self.findWithAttr(selectListOptions.sortOptions,"n","Name"),selectListOptions.media=[{v:"",n:"-- choose media type --"},{v:"none",n:"None"},{v:"anime",n:"Anime-only"},{v:"manga",n:"Manga-only"},{v:"both",n:"Both"}]),selectListOptions},this.addTag=function(tagArray,newTag){if(""!==newTag&&void 0!==newTag){var i=0,alreadyAdded=!1;if(tagArray.length>0){for(;i<tagArray.length;)tagArray[i].text===newTag&&(alreadyAdded=!0),i++;alreadyAdded===!1&&tagArray.push({text:newTag})}else tagArray.push({text:newTag})}return tagArray},this.concatenateTagArrays=function(itemTags,tagArray){if(itemTags.length>0){for(var i=0,alreadyAdded=!1;i<tagArray.length;){for(var j=0;j<itemTags.length;j++)itemTags[j].text===tagArray[i].text&&(alreadyAdded=!0);alreadyAdded===!1&&itemTags.push(tagArray[i]),i++,alreadyAdded=!1}return itemTags}return tagArray},this.checkForTagless=function(items){var areTagless=!1;return angular.forEach(items,function(item){0===item.tags.length&&(areTagless=!0)}),areTagless},this.getCommonArrays=function(controller){var commonArrays={},seasons=[{number:"03",text:"Winter"},{number:"06",text:"Spring"},{number:"09",text:"Summer"},{number:"12",text:"Fall"}],months=[{number:"01",text:"January"},{number:"02",text:"February"},{number:"03",text:"March"},{number:"04",text:"April"},{number:"05",text:"May"},{number:"06",text:"June"},{number:"07",text:"July"},{number:"08",text:"August"},{number:"09",text:"September"},{number:"10",text:"October"},{number:"11",text:"November"},{number:"12",text:"December"}],categories=[{name:"Watch"},{name:"Read"},{name:"Play"},{name:"Other"}],days=[{name:"Any"},{name:"Monday"},{name:"Tuesday"},{name:"Wednesday"},{name:"Thursday"},{name:"Friday"},{name:"Saturday"},{name:"Sunday"}];return commonArrays={months:months,seasons:seasons,categories:categories,days:days}}}).service("ItemService",["moment","$filter","ListService",function(moment,$filter,ListService){this.convertDateToSeason=function(date){for(var season="",year=date.getFullYear(),month=date.getMonth()+1,commonArrays=ListService.getCommonArrays(),i=commonArrays.seasons.length;i--;)month>Number(commonArrays.seasons[i].number)&&""===season&&(season={season:commonArrays.seasons[i+1].text,year:year}),0===i&&""===season&&(season={season:commonArrays.seasons[i].text,year:year});return season},this.itemHistory=function(item,updateHistory,type){if(console.log("item history: ",item,item.meta),0!==item.meta.history.length){var latestHistory=item.meta.history[item.meta.history.length-1].value,length="anime"===type?item.episodes-latestHistory:item.chapters-latestHistory;if(length>0&&("anime"===type?item.reWatching===!1:item.reReading===!1))for(var i=1;length>=i;i++)item.meta.history.push({date:Date.now(),value:latestHistory+i,title:item.title,id:item._id})}else updateHistory&&("anime"===type?item.reWatching===!1:item.reReading===!1)&&item.meta.history.push({date:Date.now(),value:"anime"===type?item.episodes:item.chapters,title:item.title,id:item._id});return item},this.deleteHistory=function(item,history){var temp=[];return angular.forEach(item.meta.history,function(past){past.value!==history.value&&temp.push(past)}),item.meta.history=temp,item},this.latestDate=function(latest,updated){var latestDate,diff,today=moment(new Date);return latest.substring(0,10)===updated.substring(0,10)?(latestDate=moment(updated),diff=latestDate.fromNow(),"a day ago"===diff?"Yesterday at "+latestDate.format("HH:mm"):diff.indexOf("days")>-1?diff+" at "+latestDate.format("HH:mm"):diff+"."):(latestDate=moment(latest),diff=today.diff(latestDate,"days"),0===diff?"Today":1===diff?"Yesterday":diff+" days ago.")},this.buildOverview=function(items){var overview={ongoing:$filter("filter")(items,{status:!1}).length,completed:$filter("filter")(items,{status:!0}).length};return overview},this.maxCompleteMonth=function(items){for(var modeMap={},maxCount=0,i=0;i<items.length;i++)if(void 0!==items[i].end&&null!==items[i].end){var end=items[i].end.substring(0,7);null===modeMap[end]||void 0===modeMap[end]?modeMap[end]=1:modeMap[end]++,modeMap[end]>maxCount&&(maxCount=modeMap[end])}return maxCount},this.getRatingValues=function(items){var tempRating=0,maxRatedCount=0,averageRating=0;angular.forEach(items,function(item){0!==item.rating&&(tempRating+=item.rating,maxRatedCount++)}),averageRating=tempRating/maxRatedCount;var values={maxRatedCount:maxRatedCount,averageRating:averageRating};return values},this.maxTagCount=function(items){var modeMap={},maxCount=0;return angular.forEach(items,function(item){angular.forEach(item.tags,function(tag){var text=tag.text;null===modeMap[text]||void 0===modeMap[text]?modeMap[text]=1:modeMap[text]++,modeMap[text]>maxCount&&(maxCount=modeMap[text])})}),maxCount},this.buildStatTags=function(items,averageItemRating){var checkedRating,self=this,add=!0,statTags=[],maxTagCount=self.maxTagCount(items);return angular.forEach(items,function(item){angular.forEach(item.tags,function(tag){for(var i=0;i<statTags.length;i++)statTags[i].tag===tag.text&&(add=!1,statTags[i].count+=1,statTags[i].ratedCount+=0===item.rating?0:1,statTags[i].ratings.push(item.rating),statTags[i].ratingAdded+=item.rating,statTags[i].ratingAvg=0===statTags[i].ratingAdded?0:statTags[i].ratingAdded/statTags[i].ratedCount,statTags[i].ratingWeighted=self.ratingsWeighted(statTags[i].ratings,maxTagCount,averageItemRating));add===!0&&(checkedRating=0===item.rating?0:1,statTags.push({tag:tag.text,count:1,ratedCount:checkedRating,ratings:[item.rating],ratingAdded:item.rating,ratingAvg:item.rating,ratingWeighted:0})),add=!0})}),statTags},this.ratingsWeighted=function(ratings,maxTagCount,listAverage){for(var values=[],weights=[],unratedCount=0,tagMeanScore=0,total=0,count=0,weight=0,value=0,i=0;i<ratings.length;i++)ratings[i]in values?weights[ratings[i]]++:(values.push(ratings[i]),weights[ratings[i]]=1);for(var k in weights)"function"!=typeof weights[k]&&(isNaN(weights[k])||(total+=k*weights[k],count+=weights[k])),0===k&&(unratedCount=weights[k]);return tagMeanScore=total/count,tagMeanScore=tagMeanScore*count+listAverage*unratedCount,tagMeanScore/=count,weight=count/maxTagCount,weight=1-weight,value=listAverage+(tagMeanScore-listAverage)*weight},this.buildRatingsDistribution=function(items){for(var maxCount=items.length,possibleValues=[10,9,8,7,6,5,4,3,2,1,0],ratingsDistribution=[],i=possibleValues.length;i--;){var count=$filter("filter")(items,{rating:i},!0).length;ratingsDistribution.push({number:0===i?"-":i,text:0===i?count+" entries unrated.":count+" entries rated "+i,count:count,percentage:(count/maxCount*100).toFixed(2)})}return ratingsDistribution},this.endingYears=function(items){var itemYears=$filter("unique")(items,"end.substring(0,4)");return itemYears=$filter("orderBy")(itemYears,"-end.substring(0,4)")},this.completeByMonth=function(items){for(var self=this,monthDetails={},completeByMonth=[],maxCompleteMonth=0,itemYears=self.endingYears(items),i=itemYears.length;i--;)void 0!==itemYears[i].end&&null!==itemYears[i].end&&completeByMonth.push({year:itemYears[i].end.substring(0,4),months:[{number:"01",text:"January",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"01").length},{number:"02",text:"February",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"02").length},{number:"03",text:"March",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"03").length},{number:"04",text:"April",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"04").length},{number:"05",text:"May",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"05").length},{number:"06",text:"June",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"06").length},{number:"07",text:"July",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"07").length},{number:"08",text:"August",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"08").length},{number:"09",text:"September",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"09").length},{number:"10",text:"October",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"10").length},{number:"11",text:"November",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"11").length},{number:"12",text:"December",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"12").length}]});return maxCompleteMonth=self.maxCompleteMonth(items),monthDetails={completeByMonth:completeByMonth,maxCompleteMonth:maxCompleteMonth}},this.completeBySeason=function(items){for(var self=this,seasonDetails={},completeBySeason=[],maxCompleteSeason=0,itemYears=self.endingYears(items),i=itemYears.length;i--;)void 0!==itemYears[i].end&&null!==itemYears[i].end&&completeBySeason.push({year:itemYears[i].end.substring(0,4),seasons:[{number:"03",text:"Winter",count:$filter("season")(items,itemYears[i].end.substring(0,4),"Winter").length},{number:"06",text:"Spring",count:$filter("season")(items,itemYears[i].end.substring(0,4),"Spring").length},{number:"09",text:"Summer",count:$filter("season")(items,itemYears[i].end.substring(0,4),"Summer").length},{number:"12",text:"Fall",count:$filter("season")(items,itemYears[i].end.substring(0,4),"Fall").length}]});return angular.forEach(completeBySeason,function(item){for(var i=item.seasons.length;i--;)item.seasons[i].count>maxCompleteSeason&&(maxCompleteSeason=item.seasons[i].count)}),seasonDetails={completeBySeason:completeBySeason,maxCompleteSeason:maxCompleteSeason}},this.setSeason=function(items,year,season){var self=this,array=$filter("endedSeason")(items,year,season);return angular.forEach(array,function(item){console.log(item.title),item.season=self.convertDateToSeason(new Date(item.start))}),array}}]),angular.module("characters").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Characters","characters","dropdown","/characters(/create)?"),Menus.addSubMenuItem("topbar","characters","List Characters","characters"),Menus.addSubMenuItem("topbar","characters","New Character","characters/create")}]),angular.module("characters").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCharacters",{url:"/characters",templateUrl:"modules/characters/views/list-characters.client.view.html"}).state("createCharacter",{url:"/characters/create",templateUrl:"modules/characters/views/create-character.client.view.html"}).state("viewCharacter",{url:"/characters/:characterId",templateUrl:"modules/characters/views/view-character.client.view.html"}).state("editCharacter",{url:"/characters/:characterId/edit",templateUrl:"modules/characters/views/edit-character.client.view.html"})}]),angular.module("characters").controller("CharactersController",["$scope","$stateParams","$location","Authentication","Characters","Animeitems","Mangaitems","fileUpload","$sce","$window","ListService","CharacterService","NotificationFactory",function($scope,$stateParams,$location,Authentication,Characters,Animeitems,Mangaitems,fileUpload,$sce,$window,ListService,CharacterService,NotificationFactory){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="character",$scope.isLoading=!0,$scope.pageConfig={currentPage:0,pageSize:10},$scope.filterConfig={showingCount:0,sortType:"",sortReverse:!1,searchTags:"",media:"",seriesFilter:"",tagsForFilter:[],taglessItem:!1,areTagless:!1,selectListOptions:ListService.getSelectListOptions($scope.whichController),statTags:[],voiceActors:[],series:[]},$scope.isList="list",$scope.maxItemCount=0,$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.$watchCollection("characters",function(){void 0!==$scope.characters&&($scope.filterConfig.areTagless=ListService.checkForTagless($scope.characters),$scope.filterConfig.statTags=CharacterService.buildCharacterTags($scope.characters),$scope.filterConfig.voiceActors=CharacterService.buildVoiceActors($scope.characters),$scope.filterConfig.series=CharacterService.buildSeriesList($scope.characters))}),$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.create=function(){var character=new Characters;character=new Characters({name:this.name,image:$scope.imgPath,anime:void 0!==this.anime&&null!==this.anime?this.anime._id:this.anime,manga:void 0!==this.manga&&null!==this.manga?this.manga._id:this.manga,voice:this.voice,tags:$scope.tagArray,user:this.user}),character.$save(function(response){$location.path("characters/"+response._id),NotificationFactory.success("Saved!","Character was saved successfully"),$scope.name="",$scope.image="",$scope.voice="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message,NotificationFactory.error("Error!",errorResponse.data.message)})},$scope.remove=function(character){NotificationFactory.confirmation(function(){if(character){character.$remove();for(var i in $scope.characters)$scope.characters[i]===character&&$scope.characters.splice(i,1)}else $scope.character.$remove(function(){$location.path("characters")});NotificationFactory.warning("Deleted!","Character was successfully deleted.")})},$scope.update=function(){var character=$scope.character;null!==$scope.character.manga&&void 0!==$scope.character.manga&&(character.manga=$scope.character.manga._id),null!==$scope.character.anime&&void 0!==$scope.character.anime&&(character.anime=$scope.character.anime._id),void 0!==$scope.tagArray&&(character.tags=ListService.concatenateTagArrays(character.tags,$scope.tagArray)),void 0!==$scope.imgPath&&null!==$scope.imgPath&&""!==$scope.imgPath&&(character.image=$scope.imgPath),character.$update(function(){$location.path("characters"),NotificationFactory.success("Saved!","Character was saved successfully")},function(errorResponse){$scope.error=errorResponse.data.message,NotificationFactory.error("Error!",errorResponse.data.message)})},$scope.find=function(){$scope.characters=Characters.query()},$scope.findOne=function(){$scope.character=Characters.get({characterId:$stateParams.characterId})},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.findOneAnime=function(anime){$scope.animeitem=Animeitems.get({animeitemId:anime})},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.findOneManga=function(manga){$scope.mangaitem=Mangaitems.get({mangaitemId:manga})},$scope.uploadFile=function(){$scope.imgPath="/modules/characters/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUploadCharacter")},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)}}]),angular.module("characters").directive("characterBack",function(){return function(scope,element,attrs){var url=attrs.characterBack;element.css({"background-image":"url("+url+")","background-size":"cover","background-repeat":"no-repeat","background-position":"center"})}}).directive("disableNgAnimate",["$animate",function($animate){return{restrict:"A",link:function(scope,element){$animate.enabled(!1,element)}}}]).directive("slider",["$timeout","$sce",function($timeout,$sce){return{restrict:"AE",replace:!0,scope:{slides:"=?",interval:"=?"},templateUrl:"/modules/characters/templates/slider.html",link:function(scope,elem,attrs){var timer,autoSlide,length=elem[0].childElementCount-1;if(scope.currentIndex=-1,scope.repeater=void 0===scope.slides?!1:!0,scope.interval=void 0===scope.interval?3e3:scope.interval,scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},!scope.repeater){scope.slides=[];for(var i=0;length>i;i++)scope.slides.push({index:i})}scope.goToSlide=function(slide){scope.currentIndex!==slide?slide!==scope.filteredSlides.length?scope.currentIndex=slide:scope.currentIndex=0:scope.filteredSlides[scope.currentIndex].locked?scope.filteredSlides[scope.currentIndex].locked=!1:(scope.filteredSlides[scope.currentIndex].locked=!0,
$timeout.cancel(timer))},scope.next=function(){scope.currentIndex<scope.filteredSlides.length-1?scope.currentIndex+=1:scope.currentIndex=0},scope.prev=function(){scope.currentIndex>0?scope.currentIndex-=1:scope.currentIndex=scope.filteredSlides.length-1},scope.$watch("currentIndex",function(){scope.currentIndex>-1&&(scope.filteredSlides.forEach(function(slide){slide.visible=!1,slide.locked=!1}),scope.filteredSlides[scope.currentIndex].visible=!0)}),autoSlide=function(){timer=$timeout(function(){scope.next(),timer=$timeout(autoSlide,scope.interval)},scope.interval)},autoSlide(),scope.$on("$destroy",function(){$timeout.cancel(timer)}),scope.enter=function(){scope.filteredSlides[scope.currentIndex].locked!==!0&&$timeout.cancel(timer)},scope.leave=function(){scope.filteredSlides[scope.currentIndex].locked!==!0&&(timer=$timeout(autoSlide,scope.interval))},scope.$watch("$parent.filterConfig.search",function(newValue){if(void 0!==scope.$parent.filterConfig.search){var temp=scope.interval;scope.interval=null,scope.search=newValue,scope.interval=temp}}),scope.$watch("$parent.filterConfig.media",function(newValue){if(void 0!==scope.$parent.filterConfig.media){var temp=scope.interval;scope.interval=null,scope.media=newValue,scope.interval=temp}}),scope.$watch("$parent.filterConfig.seriesFilter",function(newValue){if(void 0!==scope.$parent.filterConfig.seriesFilter){var temp=scope.interval;scope.interval=null,scope.seriesFilter=newValue,scope.interval=temp}}),scope.$watch("$parent.filterConfig.searchTags",function(newValue){if(void 0!==scope.$parent.filterConfig.media){var temp=scope.interval;scope.interval=null,scope.searchTags=newValue,scope.interval=temp}})}}}]).directive("enterTag",function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.enterTag)}),event.preventDefault())})}}}).directive("clearTagValues",function(){return function(scope,element,attrs){element.bind("click",function(event){scope.$apply(function(){scope.filterConfig.searchTags="",scope.filterConfig.characterTags="",scope.filterConfig.tagsForFilter=[]})})}}).directive("deleteSearchTag",function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(event){scope.$apply(function(){var tag=attrs.deleteSearchTag,index=scope.filterConfig.tagsForFilter.indexOf(tag);scope.filterConfig.searchTags=scope.filterConfig.searchTags.replace(tag+",",""),scope.filterConfig.tagsForFilter.splice(index,1)})})}}}).directive("dropTag",["NotificationFactory",function(NotificationFactory){return function(scope,element,attrs){element.bind("click",function(event){var text=attrs.dropTag;NotificationFactory.confirmation(function(){scope.$apply(function(){var deletingItem=scope.tagArray;scope.$parent.tagArray=[],angular.forEach(deletingItem,function(tag){tag.text!==text&&scope.$parent.tagArray.push(tag)})}),NotificationFactory.warning("Dropped!","Tag was successfully dropped")})})}}]).directive("removeTag",["NotificationFactory",function(NotificationFactory){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(event){var i,tag=attrs.removeTag,entry_type=scope.whichController;NotificationFactory.confirmation(function(){scope.$apply(function(){var index;if("character"===entry_type){for(i=0;i<scope.character.tags.length;i++)scope.character.tags[i].text===tag&&(index=i);scope.$parent.character.tags.splice(index,1)}else if("animeitem"===entry_type){for(i=0;i<scope.animeitem.tags.length;i++)scope.animeitem.tags[i].text===tag&&(index=i);scope.$parent.animeitem.tags.splice(index,1)}else if("mangaitem"===entry_type){for(i=0;i<scope.mangaitem.tags.length;i++)scope.mangaitem.tags[i].text===tag&&(index=i);scope.$parent.mangaitem.tags.splice(index,1)}}),NotificationFactory.warning("Deleted!","Tag was successfully deleted")})})}}}]),angular.module("characters").filter("seriesDetailFilter",function(){return function(array,detailSeriesName){return array.filter(function(item){if(""===detailSeriesName)return item;if(null!==item.anime&&void 0!==item.anime){if(item.anime.title===detailSeriesName)return item}else if(null!==item.manga&&void 0!==item.manga&&item.manga.title===detailSeriesName)return item})}}).filter("seriesFilter",function(){return function(array,series){return array.filter(function(item){return""===series||void 0===series?item:null!==item.anime&&void 0!==item.anime?item.anime.title.toLowerCase().indexOf(series.toLowerCase())>-1:null!==item.manga&&void 0!==item.manga?item.manga.title.toLowerCase().indexOf(series.toLowerCase())>-1:void 0})}}).filter("mediaFilter",function(){return function(array,media){return array.filter(function(item){return"anime"===media?null!==item.anime&&null===item.manga?!0:!1:"manga"===media?null!==item.manga&&null===item.anime?!0:!1:"both"===media?null!==item.anime&&null!==item.manga?!0:!1:"none"!==media?!0:null===item.anime&&null===item.manga?!0:void 0})}}).filter("tagFilter",function(){return function(array,searchTags,taglessItem){return void 0!==array?array.filter(function(item){var tagsForFilter,found=!1,i=0,tagsToSearch=[];if(taglessItem!==!0){if(void 0===searchTags||""===searchTags)return!0;for(tagsForFilter=searchTags.substring(0,searchTags.length-1).split(","),angular.forEach(item.tags,function(tag){tagsToSearch.push(tag.text)}),i=0;i<tagsForFilter.length;i++){if(-1===tagsToSearch.indexOf(tagsForFilter[i]))return!1;found=!0}return found}return 0===item.tags.length?item:void 0}):void 0}}),angular.module("characters").factory("Characters",["$resource",function($resource){return $resource("characters/:characterId",{characterId:"@_id"},{update:{method:"PUT"}})}]).service("CharacterService",function(){this.buildGenderDistribution=function(items,maxCount){var check,gender={male:{count:0,percentage:0,text:"% male."},female:{count:0,percentage:0,text:"% female."},nosex:{count:0,percentage:0,text:"% unassigned."}};return angular.forEach(items,function(item){"male"===item.tag?(gender.male.count=item.count,gender.male.percentage=Number((item.count/maxCount*100).toFixed(2))):"female"===item.tag&&(gender.female.count=item.count,gender.female.percentage=Number((item.count/maxCount*100).toFixed(2)))}),gender.nosex.count=maxCount-gender.male.count-gender.female.count,gender.nosex.percentage=Number((gender.nosex.count/maxCount*100).toFixed(2)),check=gender.female.percentage+gender.male.percentage+gender.nosex.percentage,check>100?gender.nosex.percentage-=(check-100).toFixed(2):100>check&&(gender.nosex.percentage+=(100-check).toFixed(2)),gender},this.buildCharacterTags=function(items){var add=!0,statTags=[];return angular.forEach(items,function(item){angular.forEach(item.tags,function(tag){for(var i=0;i<statTags.length;i++)statTags[i].tag===tag.text&&(add=!1,statTags[i].count+=1);add===!0&&statTags.push({tag:tag.text,count:1}),add=!0})}),statTags},this.buildRelatedCharacterTags=function(items,name){var add=!0,tagDetailCollection=[],tagDetailResult=[];return angular.forEach(items,function(item){for(var i=0;i<item.tags.length;i++)item.tags[i].text===name&&tagDetailCollection.push(item.tags)}),angular.forEach(tagDetailCollection,function(item){angular.forEach(item,function(bit){for(var i=0;i<tagDetailResult.length;i++)tagDetailResult[i].name===bit.text&&bit.text!==name&&(add=!1,tagDetailResult[i].count+=1);add===!0&&bit.text!==name&&tagDetailResult.push({name:bit.text,count:1}),add=!0})}),tagDetailResult},this.buildVoiceActors=function(items){var add=!0,voiceActors=[];return angular.forEach(items,function(item){for(var i=0;i<voiceActors.length;i++)voiceActors[i].name===item.voice&&(add=!1,voiceActors[i].count+=1);add===!0&&voiceActors.push({name:item.voice,count:1}),add=!0}),voiceActors},this.buildSeriesList=function(items){var add=!0,statSeries=[];return angular.forEach(items,function(item){for(var i=0;i<statSeries.length;i++)null!==item.anime?statSeries[i].name===item.anime.title&&(add=!1,statSeries[i].count+=1):null!==item.manga&&statSeries[i].name===item.manga.title&&(add=!1,statSeries[i].count+=1);add===!0&&(null!==item.anime?statSeries.push({name:item.anime.title,count:1}):null!==item.manga&&statSeries.push({name:item.manga.title,count:1})),add=!0}),statSeries}}),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin")}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$location",function($scope,Authentication,Menus,$location){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.isActive=function(viewLocation){return viewLocation===$location.path()},$scope.saved=localStorage.getItem("theme"),$scope.theme=null!==localStorage.getItem("theme")?JSON.parse($scope.saved):"dist/main-night.min.css",localStorage.setItem("theme",JSON.stringify($scope.theme)),$scope.isTimedTheme=localStorage.getItem("timedTheme"),$scope.timedTheme=null!==localStorage.getItem("timedTheme")?JSON.parse($scope.isTimedTheme):!1,localStorage.setItem("timedTheme",JSON.stringify($scope.timedTheme)),$scope.styles=[{name:"Day",url:"dist/main-day.min.css"},{name:"Night",url:"dist/main-night.min.css"}],$scope.changeTheme=function(){localStorage.setItem("timedTheme",JSON.stringify($scope.timedTheme));var timeOfDayTheme=localStorage.getItem("timedTheme");if("false"===timeOfDayTheme)localStorage.setItem("theme",JSON.stringify($scope.theme));else{var time=(new Date).getHours();time>20||8>time?localStorage.setItem("theme",JSON.stringify("dist/main-night.min.css")):time>8&&localStorage.setItem("theme",JSON.stringify("dist/main-day.min.css"))}var storedValue=localStorage.getItem("theme"),link=document.getElementById("app-theme");link.href=storedValue.substr(1,storedValue.lastIndexOf('"')-1),$scope.theme=storedValue.substr(1,storedValue.lastIndexOf('"')-1)}}]),angular.module("core").controller("HomeController",["$scope","$rootScope","Authentication","$window","$location","Animeitems","Mangaitems","$filter","NotificationFactory",function($scope,$rootScope,Authentication,$window,$location,Animeitems,Mangaitems,$filter,NotificationFactory){$scope.authentication=Authentication,$rootScope.$on("$viewContentLoaded",function(){window.scrollTo(0,0)}),$scope.authentication.user||$location.path("/signin"),$scope.isAddTask=!1,$scope.today=new Date,$scope.datesSelected="current",$scope.saved=localStorage.getItem("taskItems"),$scope.taskItem=null!==localStorage.getItem("taskItems")?JSON.parse($scope.saved):[{description:"Why not add a task?",date:$scope.today.toISOString().substring(0,10),complete:!1}],localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)),$scope.newTask=null,$scope.newTaskDate=null,$scope.categories=[{name:"Watch"},{name:"Read"},{name:"Play"},{name:"Other"}],$scope.newTaskCategory=$scope.categories,$scope.days=[{name:"Any"},{name:"Monday"},{name:"Tuesday"},{name:"Wednesday"},{name:"Thursday"},{name:"Friday"},{name:"Saturday"},{name:"Sunday"}],$scope.newTaskDay=$scope.days,$scope.weekBeginning=function(){var day=$scope.today.getDay(),diff=$scope.today.getDate()-day+(0===day?-6:1),wkBeg=new Date;return new Date(wkBeg.setDate(diff))},$scope.checkStatus=function(){var day=$scope.today.getDay();if(console.log($scope.taskItem),1===day){var refreshItems=$scope.taskItem;$scope.taskItem=[],angular.forEach(refreshItems,function(taskItem){taskItem.updated===!1?taskItem.completeTimes!==taskItem.repeat&&(taskItem.complete=!1,taskItem.updated=!0,$scope.taskItem.push(taskItem)):$scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))}else{var updated=$scope.taskItem;$scope.taskItem=[],angular.forEach(updated,function(taskItem){if(taskItem.updated=!1,taskItem.daily===!0)if(taskItem.completeTimes!==taskItem.repeat){var today=$scope.today.getDate();taskItem.dailyRefresh!==today?(taskItem.complete=!1,taskItem.dailyRefresh=today,$scope.taskItem.push(taskItem)):$scope.taskItem.push(taskItem)}else $scope.taskItem.push(taskItem);else $scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))}},$scope.optionArray=[],$scope.addOption=function(){if(""!==$scope.newOption&&void 0!==$scope.newOption){var i=0,alreadyAdded=!1;if($scope.optionArray.length>0){for(;i<$scope.optionArray.length;)$scope.optionArray[i].text===$scope.newOption&&(alreadyAdded=!0),i++;alreadyAdded===!1&&$scope.optionArray.push({text:$scope.newOption,complete:!1})}else $scope.optionArray.push({text:$scope.newOption,complete:!1})}$scope.newOption=""},$scope.dropOption=function(text){var deletingItem=$scope.optionArray;$scope.optionArray=[],angular.forEach(deletingItem,function(item){item.text!==text&&$scope.optionArray.push(item)})},$scope.addNew=function(){(null===$scope.newTaskDay.name||""===$scope.newTaskDay.name||void 0===$scope.newTaskDay.name)&&($scope.newTaskDay.name="Any"),(null===$scope.newTaskCategory.name||""===$scope.newTaskCategory.name||void 0===$scope.newTaskCategory.name)&&($scope.newTaskCategory.name="Other"),(null===$scope.newTaskDate||""===$scope.newTaskDate||void 0===$scope.newTaskDate)&&($scope.newTaskDate=$scope.today.toISOString().substring(0,10)),$scope.newTaskDaily===!0&&($scope.newTaskDay.name="Any"),$scope.newTaskChecklist===!0?($scope.newTaskDaily=!1,$scope.newTaskRepeat=1):$scope.optionArray=[];var day=$scope.today.getDay();$scope.taskItem.push({description:$scope.newTask,day:$scope.newTaskDay.name,date:$scope.newTaskDate,repeat:$scope.newTaskRepeat,completeTimes:0,updated:1===day?!0:!1,complete:!1,category:$scope.newTaskCategory.name,daily:$scope.newTaskDaily,dailyRefresh:$scope.today.getDate(),checklist:$scope.newTaskChecklist,checklistOptions:$scope.optionArray}),$scope.newTask="",$scope.newTaskDay=$scope.days,$scope.newTaskDate="",$scope.newTaskCategory=$scope.categories,$scope.newTaskRepeat="",$scope.newTaskDaily=!1,$scope.newTaskChecklist=!1,$scope.optionArray=[],localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)),NotificationFactory.success("Saved!","Task was saved successfully")},$scope.deleteTask=function(description){NotificationFactory.confirmation(function(){var deletingItem=$scope.taskItem;$scope.taskItem=[],angular.forEach(deletingItem,function(taskItem){taskItem.description!==description&&$scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)),NotificationFactory.warning("Deleted!","Task was successfully deleted")})},$scope.save=function(description){angular.forEach($scope.taskItem,function(taskItem){taskItem.description===description&&taskItem.complete===!0&&(taskItem.completeTimes+=1)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))},$scope.tickOff=function(itemText,optionText){angular.forEach($scope.taskItem,function(taskItem){if(taskItem.description===itemText){for(var i=0,optionsCompleted=0;i<taskItem.checklistOptions.length;)taskItem.checklistOptions[i].text===optionText&&(taskItem.checklistOptions[i].complete=!0),taskItem.checklistOptions[i].complete===!0&&(optionsCompleted+=1),i++;taskItem.checklistOptions.length===optionsCompleted&&(taskItem.completeTimes+=1,taskItem.complete=!0)}}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))},$scope.insertOption=function(description,newOption){if(""!==newOption&&void 0!==newOption){var i=0,alreadyAdded=!1;angular.forEach($scope.taskItem,function(taskItem){if(taskItem.description===description){for(;i<taskItem.checklistOptions.length;)taskItem.checklistOptions[i].text===newOption&&(alreadyAdded=!0),i++;alreadyAdded===!1&&taskItem.checklistOptions.push({text:newOption,complete:!1})}}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)),alreadyAdded===!0&&NotificationFactory.popup("Option already exists.","Please re-name and try again.","error")}}}]),angular.module("core").directive("myProgress",function(){return function(scope,element,attrs){scope.$watch(attrs.myProgress,function(val){var type="checklist-progress";element.html('<div class="'+type+'" style="width: '+val+'%;height: 100%"></div>')})}}).directive("anywhereButHere",function($document,$window){return{restrict:"A",link:function(scope,element,attrs){element.data("thing",!0),angular.element($document[0].body).on("click",function(e){var inThing=angular.element(e.target).inheritedData("thing"),ignore=angular.element(e.target).attr("ignore-here");inThing||ignore||scope.$apply(function(){scope[attrs.ngShow]=!1})})}}}),angular.module("core").filter("dayFilter",function(){return function(array,daySelected){return array.filter(function(item){var ds=daySelected;return"1"===ds&&"Monday"===item.day?item:"2"===ds&&"Tuesday"===item.day?item:"3"===ds&&"Wednesday"===item.day?item:"4"===ds&&"Thursday"===item.day?item:"5"===ds&&"Friday"===item.day?item:"6"===ds&&"Saturday"===item.day?item:"0"===ds&&"Sunday"===item.day?item:""===ds||null===ds||void 0===ds?item:"Any"===ds&&"Any"===item.day?item:void 0})}}).filter("calendarFilter",function(){return function(array,datesSelected){return array?array.filter(function(item){if(null===item.date||void 0===item.date)return datesSelected===!1?item:!1;var day=(new Date).getDay(),diff=(new Date).getDate()-day+(0===day?0:7),temp=new Date,wkEnd=new Date(temp.setDate(diff)),currentWkEnd=wkEnd.toISOString().substring(0,10);if(datesSelected===!1){if(item.date.substr(0,4)<currentWkEnd.substr(0,4))return item;if(item.date.substr(0,4)===currentWkEnd.substr(0,4)){if(item.date.substr(5,2)<currentWkEnd.substr(5,2))return item;if(item.date.substr(5,2)===currentWkEnd.substr(5,2)&&item.date.substr(8,2)<=currentWkEnd.substr(8,2))return item}}else if(datesSelected===!0){if(item.date.substr(0,4)>currentWkEnd.substr(0,4))return item;if(item.date.substr(0,4)===currentWkEnd.substr(0,4)){if(item.date.substr(5,2)>currentWkEnd.substr(5,2))return item;if(item.date.substr(5,2)===currentWkEnd.substr(5,2)&&item.date.substr(8,2)>currentWkEnd.substr(8,2))return item}}}):void 0}}).filter("dateSuffix",function($filter){var suffixes=["th","st","nd","rd"];return function(input){if(void 0!==input){var dtfilter=$filter("date")(input,"MMMM d"),day=parseInt(dtfilter.slice(-2)),relevantDigits=30>day?day%20:day%30,suffix=3>=relevantDigits?suffixes[relevantDigits]:suffixes[0],dateArray=dtfilter.split(" "),month=dateArray[0];return dateArray[1]+suffix+" "+month+" "+$filter("date")(input,"yyyy")}}}),angular.module("core").factory("NotificationFactory",function(){return toastr.options={closeButton:!1,debug:!1,newestOnTop:!1,progressBar:!1,positionClass:"toast-bottom-right",preventDuplicates:!1,onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"},{success:function(title,text){toastr.success(text,title,"Success")},warning:function(title,text){toastr.warning(text,title,"Warning")},error:function(title,text){toastr.error(text,title,"Error")},popup:function(title,text,type){swal({title:title,text:text,type:type})},confirmation:function(thenDo){swal({title:"Are you sure?",text:"Are you sure that you want to delete this?",type:"warning",showCancelButton:!0,closeOnConfirm:!0,confirmButtonText:"Yes, delete it!",confirmButtonColor:"#ec6c62"},thenDo)}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("favourites").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("favourites",{url:"/favourites",templateUrl:"modules/favourites/views/favourites.client.view.html"}).state("animeFavourites",{url:"/animefavourites",templateUrl:"modules/favourites/views/anime-favourites.client.view.html"}).state("mangaFavourites",{url:"/mangafavourites",templateUrl:"modules/favourites/views/manga-favourites.client.view.html"}).state("characterFavourites",{url:"/characterfavourites",templateUrl:"modules/favourites/views/character-favourites.client.view.html"})}]),angular.module("favourites").controller("FavouritesController",["$scope","Authentication","$window","$sce","Animeitems","Mangaitems","$location","NotificationFactory",function($scope,Authentication,$window,$sce,Animeitems,Mangaitems,$location,NotificationFactory){function favouriteLimitReached(){NotificationFactory.popup("Favourite limit reached!","Only allowed 5 favourites. \nPlease remove one if you wish to add another.","error")}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.today=(new Date).toISOString(),$scope.saved=localStorage.getItem("favouriteAnimeitems"),$scope.favouriteAnimeitem=null!==localStorage.getItem("favouriteAnimeitems")?JSON.parse($scope.saved):[{rank:"1",date:$scope.today,anime:{title:"Favourite Anime 1"}},{rank:"2",date:$scope.today,anime:{title:"Favourite Anime 2"}},{rank:"3",date:$scope.today,anime:{title:"Favourite Anime 3"}},{rank:"4",date:$scope.today,anime:{title:"Favourite Anime 4"}},{rank:"5",date:$scope.today,anime:{title:"Favourite Anime 5"}}],localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.saved=localStorage.getItem("favouriteMangaitems"),$scope.favouriteMangaitem=null!==localStorage.getItem("favouriteMangaitems")?JSON.parse($scope.saved):[{rank:"1",date:$scope.today,manga:{title:"Favourite Manga 1"}},{rank:"2",date:$scope.today,manga:{title:"Favourite Manga 2"}},{rank:"3",date:$scope.today,manga:{title:"Favourite Manga 3"}},{rank:"4",date:$scope.today,manga:{title:"Favourite Manga 4"}},{rank:"5",date:$scope.today,manga:{title:"Favourite Manga 5"}}],localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.addFavourite=function(type){"anime"===type?$scope.favouriteAnimeitem.length<5?($scope.favouriteAnimeitem.push({date:$scope.today,anime:$scope.favourite}),localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.favourite=""):favouriteLimitReached():"manga"===type&&($scope.favouriteMangaitem.length<5?($scope.favouriteMangaitem.push({date:$scope.today,manga:$scope.favourite}),localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.favourite=""):favouriteLimitReached())},$scope.removeFavourite=function(kill){NotificationFactory.confirmation(function(){var deletingItem;void 0!==kill.anime?(deletingItem=$scope.favouriteAnimeitem,$scope.favouriteAnimeitem=[],angular.forEach(deletingItem,function(item){item!==kill&&$scope.favouriteAnimeitem.push(item)}),localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.$apply(),NotificationFactory.warning("Deleted!","Favourite was successfully deleted")):void 0!==kill.manga&&(deletingItem=$scope.favouriteMangaitem,$scope.favouriteMangaitem=[],angular.forEach(deletingItem,function(item){item!==kill&&$scope.favouriteMangaitem.push(item)}),localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.$apply(),NotificationFactory.warning("Deleted!","Favourite was successfully deleted"))})},$scope.reorderFavourites=function(favourite){if($scope.selectedFavourite===favourite)$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0;else if(void 0===$scope.selectedFavourite)$scope.selectedFavourite=favourite;else{$scope.selectedFavouriteTwo=favourite;var ind1,ind2,hold;void 0!==$scope.selectedFavourite.anime?(ind1=$scope.favouriteAnimeitem.indexOf($scope.selectedFavourite),ind2=$scope.favouriteAnimeitem.indexOf($scope.selectedFavouriteTwo),hold=$scope.favouriteAnimeitem[ind1],$scope.favouriteAnimeitem[ind1]=$scope.favouriteAnimeitem[ind2],$scope.favouriteAnimeitem[ind2]=hold,localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),NotificationFactory.success("Moved!","Favourite was successfully moved"),$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0):void 0!==$scope.selectedFavourite.manga&&(ind1=$scope.favouriteMangaitem.indexOf($scope.selectedFavourite),ind2=$scope.favouriteMangaitem.indexOf($scope.selectedFavouriteTwo),hold=$scope.favouriteMangaitem[ind1],$scope.favouriteMangaitem[ind1]=$scope.favouriteMangaitem[ind2],$scope.favouriteMangaitem[ind2]=hold,localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),NotificationFactory.success("Moved!","Favourite was successfully moved"),$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0)}}}]),angular.module("favourites").directive("favouriteBack",function(){return function(scope,element,attrs){var url=attrs.favouriteBack;element.css({"background-image":"url("+url+")","background-size":"100%","background-repeat":"no-repeat","background-position":"right"})}}),angular.module("history").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("history",{url:"/history",templateUrl:"modules/history/views/history.client.view.html"})}]),angular.module("history").controller("HistoryController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","HistoryService","ListService",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,HistoryService,ListService){function getAnimeitems(){$scope.animeitems=Animeitems.query()}function getMangaitems(){$scope.mangaitems=Mangaitems.query()}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.view="Anime",$scope.isLoading=!0,$scope.buildHistory=function(){getAnimeitems(),getMangaitems()},$scope.$watch("view",function(newValue){void 0!==$scope.view&&"Anime"!==newValue&&"Manga"!==newValue&&($scope.view="Anime")}),$scope.$watchCollection("animeitems",function(){void 0!==$scope.animeitems&&($scope.animeHistory=HistoryService.buildHistoryList($scope.animeitems))}),$scope.$watchCollection("mangaitems",function(){void 0!==$scope.mangaitems&&($scope.mangaHistory=HistoryService.buildHistoryList($scope.mangaitems))}),$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.happenedWhen=function(when){return HistoryService.happenedWhen(when)},$scope.isGroupHeader=function(groupBuilder,item){return HistoryService.getGroupHeaders(groupBuilder,item)},$scope.$watchCollection("orderedAnimeHistory",function(newValue){void 0!==newValue&&($scope.groupAnimeBuilder=HistoryService.buildGroups(newValue))}),$scope.$watchCollection("orderedMangaHistory",function(newValue){void 0!==newValue&&($scope.groupMangaBuilder=HistoryService.buildGroups(newValue))})}]),angular.module("history").service("HistoryService",["moment",function(moment){this.buildHistoryList=function(items){var itemHistory=[],today=moment(new Date).startOf("day");return angular.forEach(items,function(item){angular.forEach(item.meta.history,function(history){var cutoff=moment(history.date).startOf("day"),diff=today.diff(cutoff,"days");29>diff&&itemHistory.push({date:history.date,value:history.value,title:item.title,id:item._id})})}),itemHistory},this.happenedWhen=function(when){var today=moment(new Date).startOf("day"),thisDate=moment(when).startOf("day"),diff=today.diff(thisDate,"days");return 0===diff?"Today at "+moment(when).format("HH:mm"):1===diff?"Yesterday at "+moment(when).format("HH:mm"):diff+" days ago at "+moment(when).format("HH:mm")},this.getEndsOfWeek=function(){var self=this,endsOfWeek=[],thisMonday=self.weekBeginning(),thisSunday=self.weekEnding();return endsOfWeek={mondays:[thisMonday,self.getSetDaysAgo(thisMonday,7),self.getSetDaysAgo(thisMonday,14),self.getSetDaysAgo(thisMonday,21),self.getSetDaysAgo(thisMonday,28)],sundays:[thisSunday,self.getSetDaysAgo(thisSunday,7),self.getSetDaysAgo(thisSunday,14),self.getSetDaysAgo(thisSunday,21),self.getSetDaysAgo(thisSunday,28)]}},this.getSetDaysAgo=function(thisEnd,daysAgo){var newDate=moment(thisEnd).subtract(daysAgo,"days");return newDate},this.weekBeginning=function(){var date=new Date,day=date.getDay(),diff=date.getDate()-day+(0===day?-6:1),temp=new Date,wkBeg=new Date(temp.setDate(diff));return moment(wkBeg.toISOString()).startOf("day")},this.weekEnding=function(){var date=new Date,day=date.getDay(),diff=date.getDate()-day+(0===day?0:7),temp=new Date,wkEnd=new Date(temp.setDate(diff));return moment(wkEnd.toISOString()).endOf("day")},this.buildGroups=function(items){var groupBuilder={today:[],yesterday:[],thisWeek:[],lastWeek:[],twoWeek:[],threeWeek:[],fourWeek:[]},self=this,endsOfWeek=self.getEndsOfWeek(),mondays=endsOfWeek.mondays,sundays=endsOfWeek.sundays;return angular.forEach(items,function(item){var today=moment(new Date).startOf("day"),itemDate=moment(item.date).startOf("day"),diff=today.diff(itemDate,"days");0===diff?0===groupBuilder.today.length?(groupBuilder.today.push(item),groupBuilder.today.count=1):groupBuilder.today.count++:1===diff?0===groupBuilder.yesterday.length?(groupBuilder.yesterday.push(item),groupBuilder.yesterday.count=1):groupBuilder.yesterday.count++:mondays[0]<=itemDate&&itemDate<=sundays[0]?0===groupBuilder.thisWeek.length?(groupBuilder.thisWeek.push(item),
groupBuilder.thisWeek.count=1):groupBuilder.thisWeek.count++:mondays[1]<=itemDate&&itemDate<=sundays[1]?0===groupBuilder.lastWeek.length?(groupBuilder.lastWeek.push(item),groupBuilder.lastWeek.count=1):groupBuilder.lastWeek.count++:mondays[2]<=itemDate&&itemDate<=sundays[2]?0===groupBuilder.twoWeek.length?(groupBuilder.twoWeek.push(item),groupBuilder.twoWeek.count=1):groupBuilder.twoWeek.count++:mondays[3]<=itemDate&&itemDate<=sundays[3]?0===groupBuilder.threeWeek.length?(groupBuilder.threeWeek.push(item),groupBuilder.threeWeek.count=1):groupBuilder.threeWeek.count++:mondays[4]<=itemDate&&itemDate<=sundays[4]&&(0===groupBuilder.fourWeek.length?(groupBuilder.fourWeek.push(item),groupBuilder.fourWeek.count=1):groupBuilder.fourWeek.count++)}),groupBuilder},this.getGroupHeaders=function(groupBuilder,item){return void 0!==groupBuilder?groupBuilder.today.indexOf(item)>-1?"Today ("+groupBuilder.today.count+")":groupBuilder.yesterday.indexOf(item)>-1?"Yesterday ("+groupBuilder.yesterday.count+")":groupBuilder.thisWeek.indexOf(item)>-1?"This week ("+groupBuilder.thisWeek.count+")":groupBuilder.lastWeek.indexOf(item)>-1?"Last week ("+groupBuilder.lastWeek.count+")":groupBuilder.twoWeek.indexOf(item)>-1?"Two weeks ago ("+groupBuilder.twoWeek.count+")":groupBuilder.threeWeek.indexOf(item)>-1?"Three weeks ago ("+groupBuilder.threeWeek.count+")":groupBuilder.fourWeek.indexOf(item)>-1?"Four weeks ago ("+groupBuilder.fourWeek.count+")":null:null}}]),angular.module("mangaitems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Mangaitems","mangaitems","dropdown","/mangaitems(/create)?"),Menus.addSubMenuItem("topbar","mangaitems","List Mangaitems","mangaitems"),Menus.addSubMenuItem("topbar","mangaitems","New Mangaitem","mangaitems/create")}]),angular.module("mangaitems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMangaitems",{url:"/mangaitems",templateUrl:"modules/mangaitems/views/list-mangaitems.client.view.html"}).state("createMangaitem",{url:"/mangaitems/create",templateUrl:"modules/mangaitems/views/create-mangaitem.client.view.html"}).state("viewMangaitem",{url:"/mangaitems/:mangaitemId",templateUrl:"modules/mangaitems/views/view-mangaitem.client.view.html"}).state("editMangaitem",{url:"/mangaitems/:mangaitemId/edit",templateUrl:"modules/mangaitems/views/edit-mangaitem.client.view.html"})}]),angular.module("mangaitems").controller("MangaitemsController",["$scope","$stateParams","$location","Authentication","Mangaitems","Animeitems","fileUpload","$sce","$window","ItemService","ListService","NotificationFactory","MangaFactory",function($scope,$stateParams,$location,Authentication,Mangaitems,Animeitems,fileUpload,$sce,$window,ItemService,ListService,NotificationFactory,MangaFactory){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="mangaitem",$scope.isLoading=!0,$scope.pageConfig={currentPage:0,pageSize:10},$scope.filterConfig={showingCount:0,sortType:"",sortReverse:!0,ratingLevel:void 0,ratingActions:{maxRating:10,percent:void 0,overStar:null},searchTags:"",tagsForFilter:[],taglessItem:!1,areTagless:!1,selectListOptions:ListService.getSelectListOptions($scope.whichController),statTags:ItemService.buildStatTags($scope.animeitems,0)},$scope.itemUpdate=(new Date).toISOString().substring(0,10),$scope.start=$scope.itemUpdate,$scope.latest=$scope.itemUpdate,$scope.chapters=0,$scope.volumes=0,$scope.finalNumbers=!1,$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.$watchCollection("mangaitems",function(){void 0!==$scope.mangaitems&&($scope.filterConfig.areTagless=ListService.checkForTagless($scope.mangaitems),$scope.filterConfig.statTags=ItemService.buildStatTags($scope.mangaitems,0))}),$scope.create=function(){var mangaitem=new Mangaitems;mangaitem=new Mangaitems({title:this.title,chapters:this.chapters,volumes:this.volumes,start:this.start,latest:this.latest,finalChapter:this.finalChapter,finalVolume:this.finalVolume,hardcopy:this.hardcopy,anime:void 0!==this.anime&&null!==this.anime?this.anime._id:this.anime,tags:$scope.tagArray,user:this.user}),mangaitem.$save(function(response){$location.path("/mangaitems/"+response._id),NotificationFactory.success("Saved!","Manga was saved successfully"),$scope.title="",$scope.chapters="",$scope.volumes="",$scope.start="",$scope.latest="",$scope.status="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message,NotificationFactory.error("Error!",errorResponse.data.message)})},$scope.remove=function(mangaitem){NotificationFactory.confirmation(function(){if(mangaitem){mangaitem.$remove();for(var i in $scope.mangaitems)$scope.mangaitems[i]===mangaitem&&$scope.mangaitems.splice(i,1)}else $scope.mangaitem.$remove(function(){$location.path("/mangaitems")});NotificationFactory.warning("Deleted!","Manga was successfully deleted.")})},$scope.update=function(){var mangaitem=$scope.mangaitem;MangaFactory.update(mangaitem,$scope.tagArray,$scope.updateHistory,$scope.imgPath)},$scope.tickOff=function(item){item.chapters+=1,item.latest=$scope.itemUpdate,$scope.updateHistory=!0,$scope.mangaitem=item,$scope.update()},$scope.find=function(){$scope.mangaitems=Mangaitems.query()},$scope.findOne=function(){$scope.mangaitem=Mangaitems.get({mangaitemId:$stateParams.mangaitemId})},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.uploadFile=function(){$scope.imgPath="/modules/mangaitems/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUpload")},$scope.latestDate=function(latest,updated){return ItemService.latestDate(latest,updated)},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.deleteHistory=function(item,history){NotificationFactory.confirmation(function(){$scope.mangaitem=ItemService.deleteHistory(item,history),$scope.update()})}}]),angular.module("mangaitems").factory("Mangaitems",["$resource",function($resource){return $resource("mangaitems/:mangaitemId",{mangaitemId:"@_id"},{update:{method:"PUT"}})}]).factory("MangaFactory",["Mangaitems","ListService","ItemService","NotificationFactory","$location",function(Mangaitems,ListService,ItemService,NotificationFactory,$location){return{update:function(item,tagArray,updateHistory,imgPath){var mangaitem=item;console.log(mangaitem),null!==item.anime&&void 0!==item.anime&&(mangaitem.anime=item.anime._id),void 0!==tagArray&&(mangaitem.tags=ListService.concatenateTagArrays(mangaitem.tags,tagArray)),mangaitem=ItemService.itemHistory(mangaitem,updateHistory,"manga"),void 0!==imgPath&&null!==imgPath&&""!==imgPath&&(mangaitem.image=imgPath),mangaitem.chapters===mangaitem.finalChapter&&0!==mangaitem.finalChapter?(void 0===mangaitem.end||null===mangaitem.end)&&(mangaitem.volumes=mangaitem.finalVolume,mangaitem.end=mangaitem.latest.substring(0,10)):mangaitem.reReading===!1&&(mangaitem.end=null),void 0!==mangaitem.end&&null!==mangaitem.end?mangaitem.status=!0:mangaitem.status=!1,mangaitem.reReading===!0&&mangaitem.chapters===mangaitem.finalChapter&&(mangaitem.volumes=mangaitem.finalVolume,mangaitem.reReadCount+=1,mangaitem.reReading=!1),mangaitem.$update(function(){-1===window.location.href.indexOf("tasks")&&$location.path("/mangaitems"),NotificationFactory.success("Saved!","Manga was saved successfully")},function(errorResponse){errorResponse.data.message;NotificationFactory.error("Error!",errorResponse.data.message)})}}}]),angular.module("ratings").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("ratings",{url:"/ratings",templateUrl:"modules/ratings/views/ratings.client.view.html"})}]),angular.module("ratings").controller("RatingsController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","ListService","NotificationFactory",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,ListService,NotificationFactory){function getItems(view){"Anime"===view?$scope.items=Animeitems.query():"Manga"===view&&($scope.items=Mangaitems.query())}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.view="Anime",$scope.pageConfig={currentPage:0,pageSize:50},$scope.sortType="rating",$scope.sortReverse=!0,$scope.ratingLevel=void 0,$scope.maxRating=10,$scope.hoveringOver=function(value){$scope.overStar=value,$scope.percent=100*(value/$scope.maxRating)},$scope.isLoading=!0,$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.find=function(view){getItems(view)},$scope.$watch("view",function(newValue){void 0!==$scope.view&&($scope.isLoading=!0,"Anime"!==newValue&&"Manga"!==newValue?$scope.view="Anime":getItems($scope.view))}),$scope.startEdit=function(item){$scope.editingItem=item,$scope.newRating=$scope.editingItem.rating},$scope.endEdit=function(score){var item=$scope.editingItem;return item.rating!==score&&(item.rating=score,item.$update(function(){$location.path("ratings"),NotificationFactory.success("Saved!","New rating was saved successfully")},function(errorResponse){$scope.error=errorResponse.data.message,NotificationFactory.error("Error!","Your change failed!")})),!1}}]),angular.module("ratings").directive("focusOnShow",function($timeout){return function(scope,element,attrs){scope.$watch(attrs.focusOnShow,function(newValue){$timeout(function(){var myValue=newValue&&element[0].focus();return myValue})},!0)}}),angular.module("statistics").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("statistics",{url:"/statistics",templateUrl:"modules/statistics/views/statistics.client.view.html"})}]),angular.module("statistics").controller("StatisticsController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","Characters","ListService","ItemService","CharacterService","StatisticsService",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,Characters,ListService,ItemService,CharacterService,StatisticsService){function getItems(view){"Anime"===view?($scope.statTagSortType="ratingWeighted",$scope.items=Animeitems.query()):"Manga"===view?($scope.statTagSortType="ratingWeighted",$scope.items=Mangaitems.query()):"Character"===view&&($scope.statTagSortType="count",$scope.items=Characters.query())}function getSummaryFunctions(array){$scope.seasonDetails.summaryFunctions=StatisticsService.buildSummaryFunctions(array)}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.view="Anime",$scope.historicalView="month",$scope.commonArrays=ListService.getCommonArrays("statistics"),$scope.showDetail=!1,$scope.showSeasonDetail=!1,$scope.statTagSortType="ratingWeighted",$scope.statTagSortReverse=!0,$scope.statTagDetailSortType="count",$scope.statTagDetailSortReverse=!0,$scope.statSeriesSortType="count",$scope.statSeriesSortReverse=!0,$scope.statVoiceSortType="count",$scope.statVoiceSortReverse=!0,$scope.overview={},$scope.gender={},$scope.statTags=[],$scope.showTagDetail=!1,$scope.ratingsDistribution=[],$scope.statSearch="",$scope.statSeries=[],$scope.voiceActors=[],$scope.showSeriesDetail=!1,$scope.seriesSearch="",$scope.voiceSearch="",$scope.areTagless=!1,$scope.taglessItem=!1,$scope.isLoading=!0,$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.find=function(view){getItems(view)},$scope.$watch("view",function(newValue){void 0!==$scope.view&&($scope.isLoading=!0,getItems(newValue),$scope.historicalView="month",$scope.statSearch="",$scope.showDetail=!1,$scope.showYearDetail=!1,$scope.statTags=[],$scope.ratingsDistribution=[])}),$scope.$watchCollection("items",function(){void 0!==$scope.items&&($scope.statTags=[],"Character"!==$scope.view?($scope.overview=ItemService.buildOverview($scope.items),$scope.monthDetails=ItemService.completeByMonth($scope.items),"Anime"===$scope.view&&($scope.seasonDetails=ItemService.completeBySeason($scope.items)),$scope.ratingValues=ItemService.getRatingValues($scope.items),$scope.ratingsDistribution=ItemService.buildRatingsDistribution($scope.items),$scope.statTags=ItemService.buildStatTags($scope.items,$scope.ratingValues.averageRating)):"Character"===$scope.view&&($scope.statTags=CharacterService.buildCharacterTags($scope.items),$scope.statSeries=CharacterService.buildSeriesList($scope.items),$scope.voiceActors=CharacterService.buildVoiceActors($scope.items),$scope.gender=CharacterService.buildGenderDistribution($scope.statTags,$scope.items.length)))}),$scope.seasonDetail=function(year,month,monthText){$scope.showDetail=!1,$scope.showYearDetail=!1,$scope.detailSeasonYear===year&&$scope.detailSeason===month?$scope.showSeasonDetail=!$scope.showSeasonDetail:($scope.detailSeasonYear=year,$scope.detailSeason=month,$scope.detailSeasonName=monthText,$scope.showSeasonDetail=!0)},$scope.$watchCollection("monthItems",function(newValue){void 0!==newValue&&getSummaryFunctions(newValue)}),$scope.$watchCollection("seasonItems",function(newValue){void 0!==newValue&&getSummaryFunctions(newValue)}),$scope.$watchCollection("yearItems",function(newValue){void 0!==newValue&&getSummaryFunctions(newValue)}),$scope.monthDetail=function(year,month,monthText){$scope.showSeasonDetail=!1,$scope.showYearDetail=!1,$scope.detailYear===year&&$scope.detailMonth===month?$scope.showDetail=!$scope.showDetail:($scope.detailYear=year,$scope.detailMonth=month,$scope.detailMonthName=monthText,$scope.showDetail=!0)},$scope.yearDetail=function(year,type){$scope.showSeasonDetail=!1,$scope.showDetail=!1,$scope.summaryYear===year&&$scope.summaryType===type?$scope.showYearDetail=!$scope.showYearDetail:($scope.summaryYear=year,$scope.summaryType=type,$scope.showYearDetail=!0)},$scope.tagDetail=function(name){$scope.detailTagName===name?($scope.statSearch="",$scope.showTagDetail=!1,$scope.detailTagName="",$scope.isEqual=!1):($scope.statSearch=name,$scope.detailTagName=name,$scope.isEqual=!0,$scope.showTagDetail=!0,$scope.tagDetailResult=CharacterService.buildRelatedCharacterTags($scope.items,name))},$scope.seriesDetail=function(name){$scope.detailSeriesName===name?($scope.seriesSearch="",$scope.showSeriesDetail=!1,$scope.detailSeriesName=""):($scope.seriesSearch=name,$scope.detailSeriesName=name,$scope.showSeriesDetail=!0)},$scope.voiceDetail=function(name){$scope.detailVoiceName===name?($scope.voiceSearch="",$scope.showVoiceDetail=!1,$scope.detailVoiceName=""):($scope.voiceSearch=name,$scope.detailVoiceName=name,$scope.showVoiceDetail=!0)},$scope.generateSeasons=function(){if("Anime"===$scope.view){var array=ItemService.setSeason($scope.items,$scope.detailSeasonYear,$scope.detailSeason);angular.forEach(array,function(item){item.$update(function(){console.log(item)},function(errorResponse){$scope.error=errorResponse.data.message})})}}}]),angular.module("statistics").service("StatisticsService",function(){this.buildSummaryFunctions=function(array){if(void 0!==array){for(var i=array.length,highestRating=0,lowestRating=10,averageRating=0,ratings={count:0,sum:0};i--;)highestRating=array[i].rating>highestRating?array[i].rating:highestRating,lowestRating=0<array[i].rating&&array[i].rating<lowestRating?array[i].rating:lowestRating,ratings.count+=array[i].rating>0?1:0,ratings.sum+=array[i].rating,averageRating=(ratings.sum/ratings.count).toFixed(2);return[{metric:"Average rating",value:averageRating},{metric:"Highest rating",value:highestRating},{metric:"Lowest rating",value:lowestRating}]}}}),angular.module("tasks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTasks",{url:"/tasks",templateUrl:"modules/tasks/views/list-tasks.client.view.html"}).state("createTask",{url:"/tasks/create",templateUrl:"modules/tasks/views/create-task.client.view.html"}).state("viewTask",{url:"/tasks/:taskId",templateUrl:"modules/tasks/views/view-task.client.view.html"}).state("editTask",{url:"/tasks/:taskId/edit",templateUrl:"modules/tasks/views/edit-task.client.view.html"})}]),angular.module("tasks").controller("TasksController",["$scope","$stateParams","$location","Authentication","Tasks","ListService","NotificationFactory","TaskFactory",function($scope,$stateParams,$location,Authentication,Tasks,ListService,NotificationFactory,TaskFactory){function setNewTask(){$scope.newTask={description:"",link:{linked:!1,type:"",anime:void 0,manga:void 0},day:"",date:"",repeat:0,category:"",daily:!1,checklist:!1,checklistItems:[],isAddTask:!1}}function remove(task){if(task){task.$remove();for(var i in $scope.tasks)$scope.tasks[i]===task&&$scope.tasks.splice(i,1)}else $scope.task.$remove(function(){$location.path("tasks")});NotificationFactory.warning("Deleted!","Task was successfully deleted.")}function update(refresh){console.log("update");var task=$scope.task;task.link.anime?task.link.anime=task.link.anime._id:task.link.manga&&(task.link.manga=task.link.manga._id),task.$update(function(){$location.path("tasks"),NotificationFactory.success("Saved!","Task was successfully updated!"),refresh===!0&&(console.log("update + refresh items"),find())},function(errorResponse){$scope.error=errorResponse.data.message,console.log(errorResponse),NotificationFactory.error("Error!","Task failed to save!")})}function setTabFilterDay(day){var index=0===day?7:day;$scope.filterConfig.search.day=$scope.commonArrays.days[index].name,console.log(day,$scope.filterConfig.search.day)}function checkStatus(){1===day?(console.log("monday",day),angular.forEach($scope.tasks,function(task){if(task.updateCheck===!1)if(console.log("updating - ",task.description),task.link.linked===!1)task.completeTimes!==task.repeat?(console.log("not complete",task.description),task.complete=!1,task.updateCheck=!0,$scope.task=task,update()):task.completeTimes===task.repeat&&(console.log("complete - delete",task.description),remove(task));else if(task.link.linked===!0){console.log("linked");var type=task.link.type,parts="anime"===type?{single:"episodes",all:"finalEpisode"}:{single:"chapters",all:"finalChapter"};task.link[type][parts.single]!==task.link[type][parts.all]?(console.log("linked not complete",task.description),task.complete=!1,task.updateCheck=!0,$scope.task=task,update()):task.link[type][parts.single]===task.link[type][parts.all]&&(console.log("linked complete - delete",task.description),remove(task))}})):(console.log("not monday",day),angular.forEach($scope.tasks,function(task){var change=task.updateCheck===!1?!1:!0;if(task.updateCheck=!1,task.daily===!0)if(console.log("daily",task.description),task.completeTimes!==task.repeat){console.log("not complete",task.description);var refresh=today.toISOString().slice(0,10);task.dailyRefresh.slice(0,10)!==refresh&&(console.log("not complete - update",task.description),task.complete=!1,task.dailyRefresh=refresh,$scope.task=task,update())}else task.completeTimes===task.repeat&&(console.log("complete - delete",task.description),remove(task));else task.daily===!1&&change&&(console.log("weekly update: ",task.description),$scope.task=task,update())})),find()}function find(check){Tasks.query(function(result){$scope.tasks=result,check===!0&&checkStatus()})}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin");var today=new Date,day=today.getDay();$scope.whichController="task",$scope.isLoading=!1,$scope.pageConfig={currentPage:0,pageSize:10},$scope.filterConfig={showingCount:0,sortType:"",sortReverse:!0,search:{description:"",day:""},datesSelected:!1},$scope.mangaUpdate={isPopup:!1},$scope.commonArrays=ListService.getCommonArrays(),$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.tabFilter=function(tabName){$scope.filterConfig.search.day=tabName},$scope.weekBeginning=function(){return TaskFactory.getWeekBeginning()},setNewTask(),$scope.create=function(){var task=new Tasks({description:this.newTask.description,link:{linked:this.newTask.link.linked,type:this.newTask.link.linked===!1?"":"Watch"===this.newTask.category?"anime":"manga",anime:void 0===this.newTask.link.anime?void 0:this.newTask.link.anime._id,manga:void 0===this.newTask.link.manga?void 0:this.newTask.link.manga._id},day:this.newTask.daily===!0?"Any":this.newTask.day,date:""===this.newTask.date?new Date:this.newTask.date,repeat:this.newTask.link.linked===!1?this.newTask.repeat:"Watch"===this.newTask.category?this.newTask.link.anime.finalEpisode:1,completeTimes:this.newTask.link.linked===!1?0:"Watch"===this.newTask.category?this.newTask.link.anime.episodes:0,updateCheck:1===(new Date).getDay()?!0:!1,complete:!1,category:""===this.newTask.category?"Other":this.newTask.category,daily:this.newTask.daily,checklist:this.newTask.checklist,checklistItems:this.newTask.checklistItems});task.$save(function(response){$location.path("tasks"),NotificationFactory.success("Saved!","New Task was successfully saved!"),find()},function(errorResponse){$scope.error=errorResponse.data.message,console.log(errorResponse),NotificationFactory.error("Error!","New Task failed to save!")})},$scope.deleteTask=function(task){NotificationFactory.confirmation(function(){remove(task)})},$scope.tickOff=function(task){var isLinked=!1;if(task.link.linked===!1)task.completeTimes+=1;else if(task.link.linked===!0)if(isLinked=!0,"anime"===task.link.type)task.completeTimes=task.link.anime.episodes+1,task.repeat=task.link.anime.finalEpisode,TaskFactory.updateAnimeitem(task);else if("manga"===task.link.type)if($scope.mangaUpdate.isPopup===!0)$scope.mangaUpdate.isPopup=!1,task.complete=!0,task.completeTimes=1,TaskFactory.updateMangaitem(task,task.link.manga.chapters,task.link.manga.volumes);else if($scope.mangaUpdate.isPopup===!1)return $scope.mangaUpdate.isPopup=!0,void(task.complete=!1);$scope.task=task,console.log($scope.task),update(isLinked)},$scope.changeTaskDay=function(task){$scope.task=task,update()},$scope.tickOffChecklist=function(task){var length=task.checklistItems.length,completeCount=0;angular.forEach(task.checklistItems,function(item){item.complete===!0&&(completeCount+=1)}),length===completeCount&&(task.completeTimes+=1,task.complete=!0),$scope.task=task,update()},$scope.insertChecklistItem=function(task,newChecklistItem){if(""!==newChecklistItem&&void 0!==newChecklistItem){var alreadyAdded=!1;angular.forEach(task.checklistItems,function(item){item===newChecklistItem&&(alreadyAdded=!0)}),alreadyAdded===!1?task.checklistItems.push({text:newChecklistItem,complete:!1}):alreadyAdded===!0&&NotificationFactory.popup("Option already exists.","Please re-name and try again.","error")}$scope.task=task,update()},setTabFilterDay(day),find(!0),$scope.refreshItems=function(){find(),NotificationFactory.warning("Refreshed!","Task list refreshed!")},$scope.$watchCollection("tasks",function(newValue){void 0!==$scope.tasks&&console.log(newValue,(new Date).toISOString())}),$scope.findOne=function(){$scope.task=Tasks.get({taskId:$stateParams.taskId})},window.addEventListener("scroll",function(evt){var scrollTop=document.body.scrollTop,div=document.getElementById("task-tab-filter-container"),innerDiv=document.getElementById("task-tab-filter-inner-container"),viewportOffset=div.getBoundingClientRect(),distance_from_top=viewportOffset.top;56>distance_from_top&&(div.classList.add("task-tab-filter-scroll-top"),div.classList.remove("margin-top-40"),innerDiv.classList.add("task-tab-filter-inner-container")),(distance_from_top>55||10>scrollTop)&&(div.classList.remove("task-tab-filter-scroll-top"),div.classList.add("margin-top-40"),innerDiv.classList.remove("task-tab-filter-inner-container"))})}]),angular.module("tasks").directive("taskCreate",["ListService","NotificationFactory","Animeitems","Mangaitems",function(ListService,NotificationFactory,Animeitems,Mangaitems){return{restrict:"A",replace:!0,scope:{create:"="},templateUrl:"/modules/tasks/views/create-task.client.view.html",link:function(scope,element,attrs){function process(step){switch(step){case 1:if(scope.newTask.link.linked===!0){var category=scope.newTask.category;if("Watch"===category)scope.linkItems=Animeitems.query({status:0}),scope.linkType="anime";else{if("Read"!==category)return{valid:!1,message:"Category must be either Watch or Read for linked items!"};scope.linkItems=Mangaitems.query({status:0}),scope.linkType="manga"}}else scope.linkType="",scope.newTask.link.anime=void 0,scope.newTask.link.manga=void 0;return{valid:!0}}}var newTaskModel={};scope.newTask=scope.create,angular.copy(scope.newTask,newTaskModel),scope.stepConfig={currentStep:1,stepCount:2},scope.addChecklistItem=function(){if(""!==scope.newTask.checklistItem&&void 0!==scope.newTask.checklistItem){var i=0,alreadyAdded=!1;if(scope.newTask.checklistItems.length>0){for(;i<scope.newTask.checklistItems.length;)scope.newTask.checklistItems[i].text===scope.newTask.checklistItem&&(alreadyAdded=!0),i++;alreadyAdded===!1&&scope.newTask.checklistItems.push({text:scope.newTask.checklistItem,complete:!1})}else scope.newTask.checklistItems.push({text:scope.newTask.checklistItem,complete:!1})}scope.newTask.checklistItem=""},scope.dropChecklistItem=function(text){var deletingItem=scope.newTask.checklistItems;scope.newTask.checklistItems=[],angular.forEach(deletingItem,function(item){item.text!==text&&scope.newTask.checklistItems.push(item)})},scope.backStep=function(step){scope.stepConfig.currentStep-=1},scope.takeStep=function(step){var check=process(step);check.valid?scope.stepConfig.currentStep+=1:NotificationFactory.popup("Attention!",check.message,"warning")},scope.cancel=function(){scope.stepConfig.currentStep=1,angular.copy(newTaskModel,scope.newTask),scope.scheduleForm.$setPristine()}}}}]).directive("taskMangaUpdate",function(){return{restrict:"A",replace:!0,scope:{item:"=",mangaUpdate:"="},templateUrl:"/modules/tasks/views/update-manga-task.client.view.html",link:function(scope,element,attrs){scope.stepConfig={currentStep:1,stepCount:1},scope.cancel=function(){scope.mangaForm.$setPristine(),scope.mangaUpdate.isPopup=!1}}}}).directive("loseInterest",function($document,$window){return{restrict:"A",link:function(scope,element,attrs){element.data("interesting",!0),angular.element($document[0].body).on("click",function(e){var interesting=angular.element(e.target).inheritedData("interesting"),elm=angular.element(e.target)[0].tagName,alsoInteresting="A"===elm||"I"===elm;console.log(elm),interesting||alsoInteresting||scope.$apply(function(){scope.collapseFilters()})})}}}),angular.module("tasks").factory("Tasks",["$resource",function($resource){return $resource("tasks/:taskId",{taskId:"@_id"},{update:{method:"PUT"}})}]).factory("TaskFactory",["Animeitems","Mangaitems","AnimeFactory","MangaFactory",function(Animeitems,Mangaitems,AnimeFactory,MangaFactory){var obj={},itemUpdate=(new Date).toISOString().substring(0,10);return obj.getWeekBeginning=function(){var newDate=new Date,day=newDate.getDay(),diff=newDate.getDate()-day+(0===day?-6:1),wkBeg=new Date;return new Date(wkBeg.setDate(diff))},obj.updateAnimeitem=function(task){var query=Animeitems.get({animeitemId:task.link.anime._id});query.$promise.then(function(data){console.log(data),data.episodes+=1,data.latest=itemUpdate,AnimeFactory.update(data,void 0,!0,void 0)})},obj.updateMangaitem=function(task,chapters,volumes){var query=Mangaitems.get({mangaitemId:task.link.manga._id});query.$promise.then(function(data){console.log(data),data.chapters=chapters,data.volumes=volumes,data.latest=itemUpdate,MangaFactory.update(data,void 0,!0,void 0)})},obj}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/tasks"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/signin")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$scope.credentials.username="username",$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$scope.loginBody=!0,$location.path("/tasks")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null;

}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);