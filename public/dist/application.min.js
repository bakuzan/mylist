"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mylist",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload","angularMoment"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("animeitems"),ApplicationConfiguration.registerModule("characters"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("favourites"),ApplicationConfiguration.registerModule("history"),ApplicationConfiguration.registerModule("mangaitems"),ApplicationConfiguration.registerModule("statistics"),ApplicationConfiguration.registerModule("users"),angular.module("animeitems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Animeitems","animeitems","dropdown","/animeitems(/create)?"),Menus.addSubMenuItem("topbar","animeitems","List Animeitems","animeitems"),Menus.addSubMenuItem("topbar","animeitems","New Animeitem","animeitems/create")}]),angular.module("animeitems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAnimeitems",{url:"/animeitems",templateUrl:"modules/animeitems/views/list-animeitems.client.view.html"}).state("createAnimeitem",{url:"/animeitems/create",templateUrl:"modules/animeitems/views/create-animeitem.client.view.html"}).state("viewAnimeitem",{url:"/animeitems/:animeitemId",templateUrl:"modules/animeitems/views/view-animeitem.client.view.html"}).state("editAnimeitem",{url:"/animeitems/:animeitemId/edit",templateUrl:"modules/animeitems/views/edit-animeitem.client.view.html"})}]),angular.module("animeitems").controller("AnimeitemsController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","fileUpload","$sce","$window","ItemService","ListService",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,fileUpload,$sce,$window,ItemService,ListService){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="animeitem",$scope.isLoading=!0,$scope.currentPage=0,$scope.pageSize=10,$scope.pageCount=0,$scope.$watch("showingCount",function(){var pagingDetails=ListService.numberOfPages($scope.showingCount,$scope.pageSize,$scope.currentPage);$scope.currentPage=pagingDetails.currentPage,$scope.pageCount=pagingDetails.pageCount}),$scope.itemUpdate=(new Date).toISOString().substring(0,10),$scope.viewItemHistory=!1,$scope.sortOptions=[{v:"title",n:"Title"},{v:"episodes",n:"Episodes"},{v:"start",n:"Start date"},{v:"end",n:"End date"},{v:["latest","meta.updated"],n:"Latest"},{v:"rating",n:"Rating"}],$scope.sortReverse=!0,$scope.finalNumbers=!1,$scope.ratingLevel=void 0,$scope.maxRating=10,$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.statTags=[],$scope.areTagless=!1,$scope.taglessItem=!1,$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.searchTags="",$scope.passTag=function(tag){-1===$scope.searchTags.indexOf(tag)&&($scope.searchTags+=tag+",",$scope.tagsForFilter=$scope.searchTags.substring(0,$scope.searchTags.length-1).split(","))},$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.$watchCollection("animeitems",function(){if(void 0!==$scope.animeitems){$scope.areTagless=ListService.checkForTagless($scope.animeitems);var maxTagCount=ItemService.maxTagCount($scope.animeitems);$scope.statTags=ItemService.buildStatTags($scope.animeitems,maxTagCount,0)}}),$scope.hoveringOver=function(value){$scope.overStar=value,$scope.percent=100*(value/$scope.maxRating)},$scope.create=function(){var animeitem=new Animeitems;animeitem=new Animeitems(void 0!==this.manga&&null!==this.manga?{title:this.title,episodes:this.episodes,start:this.start,latest:this.latest,finalEpisode:this.finalEpisode,disc:this.disc,manga:this.manga._id,tags:$scope.tagArray,user:this.user}:{title:this.title,episodes:this.episodes,start:this.start,latest:this.latest,finalEpisode:this.finalEpisode,disc:this.disc,manga:this.manga,tags:$scope.tagArray,user:this.user}),animeitem.$save(function(response){$location.path("/animeitems/"+response._id),$scope.title="",$scope.episodes="",$scope.start="",$scope.latest="",$scope.status="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(animeitem){var removal=$window.confirm("Are you sure you want to delete this item?");if(removal)if(animeitem){animeitem.$remove();for(var i in $scope.animeitems)$scope.animeitems[i]===animeitem&&$scope.animeitems.splice(i,1)}else $scope.animeitem.$remove(function(){$location.path("animeitems")})},$scope.update=function(){var animeitem=$scope.animeitem;null!==$scope.animeitem.manga&&void 0!==$scope.animeitem.manga&&(animeitem.manga=$scope.animeitem.manga._id),void 0!==$scope.tagArray&&(animeitem.tags=ListService.concatenateTagArrays(animeitem.tags,$scope.tagArray)),animeitem=ItemService.itemHistory(animeitem,$scope.updateHistory,"anime"),void 0!==$scope.imgPath&&null!==$scope.imgPath&&""!==$scope.imgPath&&(animeitem.image=$scope.imgPath),animeitem.episodes===animeitem.finalEpisode&&0!==animeitem.finalEpisode?void 0===animeitem.end&&(animeitem.end=animeitem.latest.substring(0,10)):animeitem.reWatching===!1&&(animeitem.end=null),void 0!==animeitem.end&&null!==animeitem.end?animeitem.status=!0:animeitem.status=!1,animeitem.reWatching===!0&&animeitem.episodes===animeitem.finalEpisode&&(animeitem.reWatchCount+=1,animeitem.reWatching=!1),animeitem.$update(function(){$location.path("animeitems")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.animeitems=Animeitems.query(),console.log($scope.animeitems)},$scope.findOne=function(){$scope.animeitem=Animeitems.get({animeitemId:$stateParams.animeitemId})},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.uploadFile=function(){$scope.imgPath="/modules/animeitems/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUploadAnime")},$scope.latestDate=function(latest,updated){return ItemService.latestDate(latest,updated)},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)}}]),angular.module("animeitems").directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}]).directive("listBack",function(){return function(scope,element,attrs){var url=attrs.listBack;element.css({"background-image":"url("+url+")","background-size":"50%","background-repeat":"no-repeat","background-position":"right"})}}).directive("keycuts",function(){return{restrict:"A",link:function(scope,element,attrs){scope.$on("my:keydown",function(event,e){e.ctrlKey&&39===e.keyCode&&scope.currentPage<scope.pageCount?(scope.currentPage=scope.currentPage+1,scope.currentPage>scope.pageCount-1&&(scope.currentPage=scope.currentPage-1)):e.ctrlKey&&37===e.keyCode&&scope.currentPage>0?scope.currentPage=scope.currentPage-1:e.altKey&&86===e.keyCode&&("list"===scope.isList?scope.isList="carousel":"carousel"===scope.isList?scope.isList="list":"Anime"===scope.view?scope.view="Manga":"Manga"===scope.view?scope.view="Character":"Character"===scope.view&&(scope.view="Anime"))})}}}),angular.module("animeitems").filter("startFrom",function(){return function(input,start){return start=+start,input.slice(start)}}).filter("ratingFilter",function(){return function(array,rating){return array.filter(function(item){return item.rating===rating?item:void 0===rating?item:void 0})}}).filter("endedMonth",function(){return function(array,year,month){return array.filter(function(item){return void 0!==item.end&&null!==item.end&&item.end.substring(0,4)===year&&item.end.substr(5,2)===month?item:void 0})}}).filter("endedSeason",["moment",function(moment){return function(array,year,month){return array.filter(function(item){var num,startMonth,startYear,diff,weeks,start=moment(item.start),end=moment(item.end),pad="00";if(void 0!==item.end&&null!==item.end)if(9<item.finalEpisode&&item.finalEpisode<14){if(startMonth=(pad+(month-2)).slice(-pad.length),(item.end.substring(0,4)===year&&item.end.substr(5,2)===month||item.start.substring(0,4)===year&&item.start.substr(5,2)===startMonth)&&(diff=end.diff(start,"days"),weeks=Math.ceil(diff/7)+1,weeks>=item.episodes))return item}else if(13<item.finalEpisode&&item.finalEpisode<26&&(num=month-5>0?month-5:10,startYear=month-5>0?year:year-1,startMonth=(pad+num).slice(-pad.length),(item.end.substring(0,4)===year&&item.end.substr(5,2)===month||item.start.substring(0,4)===startYear&&item.start.substr(5,2)===startMonth)&&(diff=end.diff(start,"days"),weeks=Math.ceil(diff/7)+1,weeks>=item.episodes)))return item})}}]),angular.module("animeitems").factory("Animeitems",["$resource",function($resource){return $resource("animeitems/:animeitemId",{animeitemId:"@_id"},{update:{method:"PUT"}})}]).service("fileUpload",["$http",function($http){this.uploadFileToUrl=function(file,uploadUrl){var fd=new FormData;fd.append("file",file),$http.post(uploadUrl,fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}}).success(function(response){alert("File Uploaded!")}).error(function(err){alert("File Upload Failed: "+err.message)})}}]).service("ListService",function(){this.loader=function(value){return value?!1:!0},this.numberOfPages=function(showingCount,pageSize,currentPage){var pageCount=Math.ceil(showingCount/pageSize);currentPage+1>=pageCount&&0!==pageCount&&(currentPage=pageCount-1),0!==pageCount&&0>currentPage&&(currentPage=0);var pagingDetails={currentPage:currentPage,pageCount:pageCount};return pagingDetails},this.addTag=function(tagArray,newTag){if(""!==newTag&&void 0!==newTag){var i=0,alreadyAdded=!1;if(tagArray.length>0){for(;i<tagArray.length;)tagArray[i].text===newTag&&(alreadyAdded=!0),i++;alreadyAdded===!1&&tagArray.push({text:newTag})}else tagArray.push({text:newTag})}return tagArray},this.concatenateTagArrays=function(itemTags,tagArray){if(itemTags.length>0){for(var i=0,alreadyAdded=!1;i<tagArray.length;){for(var j=0;j<itemTags.length;j++)itemTags[j].text===tagArray[i].text&&(alreadyAdded=!0);alreadyAdded===!1&&itemTags.push(tagArray[i]),i++,alreadyAdded=!1}return itemTags}return tagArray},this.checkForTagless=function(items){var areTagless=!1;return angular.forEach(items,function(item){0===item.tags.length&&(areTagless=!0)}),areTagless}}).service("ItemService",["moment","$filter",function(moment,$filter){this.itemHistory=function(item,updateHistory,type){if(0!==item.meta.history.length){var latestHistory=item.meta.history[item.meta.history.length-1].value,length="anime"===type?item.episodes-latestHistory:item.chapters-latestHistory;if(length>0&&("anime"===type?item.reWatching===!1:item.reReading===!1))for(var i=1;length>=i;i++)item.meta.history.push({date:Date.now(),value:latestHistory+i,title:item.title,id:item._id})}else updateHistory&&("anime"===type?item.reWatching===!1:item.reReading===!1)&&item.meta.history.push({date:Date.now(),value:"anime"===type?item.episodes:item.chapters,title:item.title,id:item._id});return item},this.latestDate=function(latest,updated){var latestDate,diff,today=moment(new Date);return latest.substring(0,10)===updated.substring(0,10)?(latestDate=moment(updated),diff=latestDate.fromNow(),"a day ago"===diff?"Yesterday":diff+"."):(latestDate=moment(latest),diff=today.diff(latestDate,"days"),0===diff?"Today":1===diff?"Yesterday":diff+" days ago.")},this.maxCompleteMonth=function(items){for(var modeMap={},maxCount=0,i=0;i<items.length;i++)if(void 0!==items[i].end&&null!==items[i].end){var end=items[i].end.substring(0,7);null===modeMap[end]||void 0===modeMap[end]?modeMap[end]=1:modeMap[end]++,modeMap[end]>maxCount&&(maxCount=modeMap[end])}return maxCount},this.maxTagCount=function(items){var modeMap={},maxCount=0;return angular.forEach(items,function(item){angular.forEach(item.tags,function(tag){var text=tag.text;null===modeMap[text]||void 0===modeMap[text]?modeMap[text]=1:modeMap[text]++,modeMap[text]>maxCount&&(maxCount=modeMap[text])})}),maxCount},this.buildStatTags=function(items,maxTagCount,averageItemRating){var checkedRating,self=this,add=!0,statTags=[];return angular.forEach(items,function(item){angular.forEach(item.tags,function(tag){for(var i=0;i<statTags.length;i++)statTags[i].tag===tag.text&&(add=!1,statTags[i].count+=1,statTags[i].ratedCount+=0===item.rating?0:1,statTags[i].ratings.push(item.rating),statTags[i].ratingAdded+=item.rating,statTags[i].ratingAvg=0===statTags[i].ratingAdded?0:statTags[i].ratingAdded/statTags[i].ratedCount,statTags[i].ratingWeighted=self.ratingsWeighted(statTags[i].ratings,maxTagCount,averageItemRating));add===!0&&(checkedRating=0===item.rating?0:1,statTags.push({tag:tag.text,count:1,ratedCount:checkedRating,ratings:[item.rating],ratingAdded:item.rating,ratingAvg:item.rating,ratingWeighted:0})),add=!0})}),statTags},this.ratingsWeighted=function(ratings,maxTagCount,listAverage){for(var values=[],weights=[],unratedCount=0,tagMeanScore=0,total=0,count=0,weight=0,value=0,i=0;i<ratings.length;i++)ratings[i]in values?weights[ratings[i]]++:(values.push(ratings[i]),weights[ratings[i]]=1);for(var k in weights)"function"!=typeof weights[k]&&(isNaN(weights[k])||(total+=k*weights[k],count+=weights[k])),0===k&&(unratedCount=weights[k]);return tagMeanScore=total/count,tagMeanScore=tagMeanScore*count+listAverage*unratedCount,tagMeanScore/=count,weight=count/maxTagCount,weight=1-weight,value=listAverage+(tagMeanScore-listAverage)*weight},this.endingYears=function(items){var itemYears=$filter("unique")(items,"end.substring(0,4)");return itemYears=$filter("orderBy")(itemYears,"-end.substring(0,4)")},this.completeByMonth=function(items){for(var self=this,completeByMonth=[],itemYears=self.endingYears(items),i=itemYears.length;i--;)void 0!==itemYears[i].end&&null!==itemYears[i].end&&completeByMonth.push({year:itemYears[i].end.substring(0,4),months:[{number:"01",text:"January",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"01").length},{number:"02",text:"February",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"02").length},{number:"03",text:"March",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"03").length},{number:"04",text:"April",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"04").length},{number:"05",text:"May",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"05").length},{number:"06",text:"June",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"06").length},{number:"07",text:"July",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"07").length},{number:"08",text:"August",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"08").length},{number:"09",text:"September",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"09").length},{number:"10",text:"October",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"10").length},{number:"11",text:"November",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"11").length},{number:"12",text:"December",count:$filter("endedMonth")(items,itemYears[i].end.substring(0,4),"12").length}]});return completeByMonth},this.completeBySeason=function(items){for(var self=this,completeBySeason=[],itemYears=self.endingYears(items),i=itemYears.length;i--;)void 0!==itemYears[i].end&&null!==itemYears[i].end&&completeBySeason.push({year:itemYears[i].end.substring(0,4),seasons:[{number:"03",text:"Winter",count:$filter("endedSeason")(items,itemYears[i].end.substring(0,4),"03").length},{number:"06",text:"Spring",count:$filter("endedSeason")(items,itemYears[i].end.substring(0,4),"06").length},{number:"09",text:"Summer",count:$filter("endedSeason")(items,itemYears[i].end.substring(0,4),"09").length},{number:"12",text:"Fall",count:$filter("endedSeason")(items,itemYears[i].end.substring(0,4),"12").length}]});return completeBySeason}}]),angular.module("characters").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Characters","characters","dropdown","/characters(/create)?"),Menus.addSubMenuItem("topbar","characters","List Characters","characters"),Menus.addSubMenuItem("topbar","characters","New Character","characters/create")}]),angular.module("characters").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCharacters",{url:"/characters",templateUrl:"modules/characters/views/list-characters.client.view.html"}).state("createCharacter",{url:"/characters/create",templateUrl:"modules/characters/views/create-character.client.view.html"}).state("viewCharacter",{url:"/characters/:characterId",templateUrl:"modules/characters/views/view-character.client.view.html"}).state("editCharacter",{url:"/characters/:characterId/edit",templateUrl:"modules/characters/views/edit-character.client.view.html"})}]),angular.module("characters").controller("CharactersController",["$scope","$stateParams","$location","Authentication","Characters","Animeitems","Mangaitems","fileUpload","$sce","$window","ListService",function($scope,$stateParams,$location,Authentication,Characters,Animeitems,Mangaitems,fileUpload,$sce,$window,ListService){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="character",$scope.isLoading=!0,$scope.currentPage=0,$scope.pageSize=10,$scope.pageCount=0,$scope.$watch("showingCount",function(){var pagingDetails=ListService.numberOfPages($scope.showingCount,$scope.pageSize,$scope.currentPage);$scope.currentPage=pagingDetails.currentPage,$scope.pageCount=pagingDetails.pageCount}),$scope.isList="list",$scope.maxItemCount=0,$scope.statTagSortType="count",$scope.statTagSortReverse=!0,$scope.statTagDetailSortType="count",$scope.statTagDetailSortReverse=!0,$scope.statSeriesSortType="count",$scope.statSeriesSortReverse=!0,$scope.myInterval=2500,$scope.sortType="name",$scope.sortReverse=!1,$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.voiceActors=[],$scope.statTags=[],$scope.showTagDetail=!1,$scope.statSearch="",$scope.statSeries=[],$scope.showSeriesDetail=!1,$scope.seriesSearch="",$scope.areTagless=!1,$scope.taglessItem=!1,$scope.male=0,$scope.female=0,$scope.nosex=0,$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.$watchCollection("characters",function(){if(void 0!==$scope.characters){$scope.areTagless=ListService.checkForTagless($scope.characters);var add=!0;angular.forEach($scope.characters,function(item){angular.forEach(item.tags,function(tag){for(var i=0;i<$scope.statTags.length;i++)$scope.statTags[i].tag===tag.text&&(add=!1,$scope.statTags[i].count+=1);add===!0&&$scope.statTags.push({tag:tag.text,count:1}),add=!0})}),angular.forEach($scope.characters,function(item){for(var i=0;i<$scope.voiceActors.length;i++)$scope.voiceActors[i]===item.voice&&(add=!1);add===!0&&$scope.voiceActors.push(item.voice),add=!0})}}),$scope.searchTags="",$scope.passTag=function(tag){-1===$scope.searchTags.indexOf(tag)&&($scope.searchTags+=tag+",",$scope.tagsForFilter=$scope.searchTags.substring(0,$scope.searchTags.length-1).split(","))},$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.create=function(){var character=new Characters;character=new Characters(void 0!==this.anime&&void 0!==this.manga&&null!==this.anime&&null!==this.manga?{name:this.name,image:$scope.imgPath,anime:this.anime._id,manga:this.manga._id,voice:this.voice,tags:$scope.tagArray,user:this.user}:void 0!==this.anime&&null!==this.anime?{name:this.name,image:$scope.imgPath,anime:this.anime._id,manga:this.manga,voice:this.voice,tags:$scope.tagArray,user:this.user}:void 0!==this.manga&&null!==this.manga?{name:this.name,image:$scope.imgPath,anime:this.anime,manga:this.manga._id,voice:this.voice,tags:$scope.tagArray,user:this.user}:{name:this.name,image:$scope.imgPath,anime:this.anime,manga:this.manga,voice:this.voice,tags:$scope.tagArray,user:this.user}),character.$save(function(response){$location.path("characters/"+response._id),$scope.name="",$scope.image="",$scope.voice="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(character){var removal=$window.confirm("Are you sure you want to delete this item?");if(removal)if(character){character.$remove();for(var i in $scope.characters)$scope.characters[i]===character&&$scope.characters.splice(i,1)}else $scope.character.$remove(function(){$location.path("characters")})},$scope.update=function(){var character=$scope.character;null!==$scope.character.manga&&void 0!==$scope.character.manga&&(character.manga=$scope.character.manga._id),null!==$scope.character.anime&&void 0!==$scope.character.anime&&(character.anime=$scope.character.anime._id),void 0!==$scope.tagArray&&(character.tags=ListService.concatenateTagArrays(character.tags,$scope.tagArray)),void 0!==$scope.imgPath&&null!==$scope.imgPath&&""!==$scope.imgPath&&(character.image=$scope.imgPath),character.$update(function(){$location.path("characters")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.characters=Characters.query()},$scope.findOne=function(){$scope.character=Characters.get({characterId:$stateParams.characterId})},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.findOneAnime=function(anime){$scope.animeitem=Animeitems.get({animeitemId:anime})},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.findOneManga=function(manga){$scope.mangaitem=Mangaitems.get({mangaitemId:manga})},$scope.uploadFile=function(){$scope.imgPath="/modules/characters/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUploadCharacter")},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)}}]),angular.module("characters").directive("characterBack",function(){return function(scope,element,attrs){var url=attrs.characterBack;element.css({"background-image":"url("+url+")","background-size":"100%","background-repeat":"no-repeat","background-position":"center"})}}).directive("disableNgAnimate",["$animate",function($animate){return{restrict:"A",link:function(scope,element){$animate.enabled(!1,element)}}}]).directive("enterTag",function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.enterTag)}),event.preventDefault())})}}}).directive("clearTagValues",function(){return function(scope,element,attrs){element.bind("click",function(event){scope.$apply(function(){scope.searchTags="",scope.characterTags="",scope.tagsForFilter=[]})})}}).directive("deleteSearchTag",function(){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(event){scope.$apply(function(){var tag=attrs.deleteSearchTag,index=scope.tagsForFilter.indexOf(tag);scope.$parent.searchTags=scope.searchTags.replace(tag+",",""),scope.$parent.tagsForFilter.splice(index,1)})})}}}).directive("dropTag",["$window",function($window){return function(scope,element,attrs){element.bind("click",function(event){var text=attrs.dropTag,removal=$window.confirm("Are you sure you don't want to add this tag?");removal&&scope.$apply(function(){var deletingItem=scope.tagArray;scope.$parent.tagArray=[],angular.forEach(deletingItem,function(tag){tag.text!==text&&scope.$parent.tagArray.push(tag)})})})}}]).directive("removeTag",["$window",function($window){return{restrict:"A",link:function(scope,element,attrs){element.bind("click",function(event){var i,tag=attrs.removeTag,entry_type=scope.whichController,removal=$window.confirm("Are you sure you want to remove this tag from the entry?");removal&&scope.$apply(function(){var index;if("character"===entry_type){for(i=0;i<scope.character.tags.length;i++)scope.character.tags[i].text===tag&&(index=i);scope.$parent.character.tags.splice(index,1)}else if("animeitem"===entry_type){for(i=0;i<scope.animeitem.tags.length;i++)scope.animeitem.tags[i].text===tag&&(index=i);scope.$parent.animeitem.tags.splice(index,1)}else if("mangaitem"===entry_type){for(i=0;i<scope.mangaitem.tags.length;i++)scope.mangaitem.tags[i].text===tag&&(index=i);scope.$parent.mangaitem.tags.splice(index,1)}})})}}}]),angular.module("characters").filter("seriesDetailFilter",function(){return function(array,detailSeriesName){return array.filter(function(item){if(null!==item.anime&&void 0!==item.anime){if(item.anime.title===detailSeriesName)return item}else if(null!==item.manga&&void 0!==item.manga&&item.manga.title===detailSeriesName)return item})}}).filter("mediaFilter",function(){return function(array,media){return array.filter(function(item){return"anime"===media?null!==item.anime&&null===item.manga?!0:!1:"manga"===media?null!==item.manga&&null===item.anime?!0:!1:"both"===media?null!==item.anime&&null!==item.manga?!0:!1:"none"!==media?!0:null===item.anime&&null===item.manga?!0:void 0})}}).filter("tagFilter",function(){return function(array,searchTags,taglessItem){return array.filter(function(item){var tagsForFilter,found=!1,i=0,tagsToSearch=[];if(taglessItem!==!0){if(void 0===searchTags||""===searchTags)return!0;for(tagsForFilter=searchTags.substring(0,searchTags.length-1).split(","),angular.forEach(item.tags,function(tag){tagsToSearch.push(tag.text)}),i=0;i<tagsForFilter.length;i++){if(-1===tagsToSearch.indexOf(tagsForFilter[i]))return!1;found=!0}return found}return 0===item.tags.length?item:void 0})}}),angular.module("characters").factory("Characters",["$resource",function($resource){return $resource("characters/:characterId",{characterId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$rootScope","Authentication","$window","$location","Animeitems","Mangaitems","$filter",function($scope,$rootScope,Authentication,$window,$location,Animeitems,Mangaitems,$filter){$scope.authentication=Authentication,$rootScope.$on("$viewContentLoaded",function(){window.scrollTo(0,0)}),$scope.authentication.user||$location.path("/signin"),$scope.isAddTask=!1,$scope.today=new Date,$scope.datesSelected="current",$scope.saved=localStorage.getItem("taskItems"),$scope.taskItem=null!==localStorage.getItem("taskItems")?JSON.parse($scope.saved):[{description:"Why not add a task?",date:$scope.today.toISOString().substring(0,10),complete:!1}],localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)),$scope.newTask=null,$scope.newTaskDate=null,$scope.categories=[{name:"Watch"},{name:"Read"},{name:"Play"},{name:"Other"}],$scope.newTaskCategory=$scope.categories,$scope.days=[{name:"Any"},{name:"Monday"},{name:"Tuesday"},{name:"Wednesday"},{name:"Thursday"},{name:"Friday"},{name:"Saturday"},{name:"Sunday"}],$scope.newTaskDay=$scope.days,$scope.weekBeginning=function(){var day=$scope.today.getDay(),diff=$scope.today.getDate()-day+(0===day?-6:1),wkBeg=new Date;return new Date(wkBeg.setDate(diff))},$scope.checkStatus=function(){var day=$scope.today.getDay();if(console.log($scope.taskItem),1===day){var refreshItems=$scope.taskItem;$scope.taskItem=[],angular.forEach(refreshItems,function(taskItem){taskItem.updated===!1?taskItem.completeTimes!==taskItem.repeat&&(taskItem.complete=!1,taskItem.updated=!0,$scope.taskItem.push(taskItem)):$scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))}else{var updated=$scope.taskItem;$scope.taskItem=[],angular.forEach(updated,function(taskItem){if(taskItem.updated=!1,taskItem.daily===!0)if(taskItem.completeTimes!==taskItem.repeat){var today=$scope.today.getDate();taskItem.dailyRefresh!==today?(taskItem.complete=!1,taskItem.dailyRefresh=today,$scope.taskItem.push(taskItem)):$scope.taskItem.push(taskItem)}else $scope.taskItem.push(taskItem);else $scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))}},$scope.optionArray=[],$scope.addOption=function(){if(""!==$scope.newOption&&void 0!==$scope.newOption){var i=0,alreadyAdded=!1;if($scope.optionArray.length>0){for(;i<$scope.optionArray.length;)$scope.optionArray[i].text===$scope.newOption&&(alreadyAdded=!0),i++;alreadyAdded===!1&&$scope.optionArray.push({text:$scope.newOption,complete:!1})}else $scope.optionArray.push({text:$scope.newOption,complete:!1})}$scope.newOption=""},$scope.dropOption=function(text){var removal=$window.confirm("Are you sure you don't want to add this option?");if(removal){var deletingItem=$scope.optionArray;$scope.optionArray=[],angular.forEach(deletingItem,function(item){item.text!==text&&$scope.optionArray.push(item)})}},$scope.addNew=function(){(null===$scope.newTaskDay.name||""===$scope.newTaskDay.name||void 0===$scope.newTaskDay.name)&&($scope.newTaskDay.name="Any"),(null===$scope.newTaskCategory.name||""===$scope.newTaskCategory.name||void 0===$scope.newTaskCategory.name)&&($scope.newTaskCategory.name="Other"),(null===$scope.newTaskDate||""===$scope.newTaskDate||void 0===$scope.newTaskDate)&&($scope.newTaskDate=$scope.today.toISOString().substring(0,10)),$scope.newTaskDaily===!0&&($scope.newTaskDay.name="Any"),$scope.newTaskChecklist===!0?($scope.newTaskDaily=!1,$scope.newTaskRepeat=1):$scope.optionArray=[];var day=$scope.today.getDay();$scope.taskItem.push({description:$scope.newTask,day:$scope.newTaskDay.name,date:$scope.newTaskDate,repeat:$scope.newTaskRepeat,completeTimes:0,updated:1===day?!0:!1,complete:!1,category:$scope.newTaskCategory.name,daily:$scope.newTaskDaily,dailyRefresh:$scope.today.getDate(),checklist:$scope.newTaskChecklist,checklistOptions:$scope.optionArray}),$scope.newTask="",$scope.newTaskDay=$scope.days,$scope.newTaskDate="",$scope.newTaskCategory=$scope.categories,$scope.newTaskRepeat="",$scope.newTaskDaily=!1,$scope.newTaskChecklist=!1,$scope.optionArray=[],localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))},$scope.deleteTask=function(description){var removal=$window.confirm("Are you sure you want to delete this task?"),deletingItem=$scope.taskItem;$scope.taskItem=[],removal&&(angular.forEach(deletingItem,function(taskItem){taskItem.description!==description&&$scope.taskItem.push(taskItem)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem)))},$scope.save=function(description){angular.forEach($scope.taskItem,function(taskItem){taskItem.description===description&&taskItem.complete===!0&&(taskItem.completeTimes+=1)}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))},$scope.tickOff=function(itemText,optionText){
angular.forEach($scope.taskItem,function(taskItem){if(taskItem.description===itemText){for(var i=0,optionsCompleted=0;i<taskItem.checklistOptions.length;)taskItem.checklistOptions[i].text===optionText&&(taskItem.checklistOptions[i].complete=!0),taskItem.checklistOptions[i].complete===!0&&(optionsCompleted+=1),i++;taskItem.checklistOptions.length===optionsCompleted&&(taskItem.completeTimes+=1,taskItem.complete=!0)}}),localStorage.setItem("taskItems",JSON.stringify($scope.taskItem))}}]),angular.module("core").filter("dayFilter",function(){return function(array,daySelected){return array.filter(function(item){var ds=daySelected;return"1"===ds&&"Monday"===item.day?item:"2"===ds&&"Tuesday"===item.day?item:"3"===ds&&"Wednesday"===item.day?item:"4"===ds&&"Thursday"===item.day?item:"5"===ds&&"Friday"===item.day?item:"6"===ds&&"Saturday"===item.day?item:"0"===ds&&"Sunday"===item.day?item:""===ds||null===ds||void 0===ds?item:"Any"===ds&&"Any"===item.day?item:void 0})}}).filter("dateFilter",function(){return function(array,datesSelected){return array.filter(function(item){if(null===item.date||void 0===item.date)return"current"===datesSelected?item:!1;var day=(new Date).getDay(),diff=(new Date).getDate()-day+(0===day?0:7),temp=new Date,wkEnd=new Date(temp.setDate(diff)),currentWkEnd=wkEnd.toISOString().substring(0,10);if("current"===datesSelected){if(item.date.substr(0,4)<currentWkEnd.substr(0,4))return item;if(item.date.substr(0,4)===currentWkEnd.substr(0,4)){if(item.date.substr(5,2)<currentWkEnd.substr(5,2))return item;if(item.date.substr(5,2)===currentWkEnd.substr(5,2)&&item.date.substr(8,2)<=currentWkEnd.substr(8,2))return item}}else if("future"===datesSelected){if(item.date.substr(0,4)>currentWkEnd.substr(0,4))return item;if(item.date.substr(0,4)===currentWkEnd.substr(0,4)){if(item.date.substr(5,2)>currentWkEnd.substr(5,2))return item;if(item.date.substr(5,2)===currentWkEnd.substr(5,2)&&item.date.substr(8,2)>currentWkEnd.substr(8,2))return item}}})}}).filter("dateSuffix",function($filter){var suffixes=["th","st","nd","rd"];return function(input){if(void 0!==input){var dtfilter=$filter("date")(input,"MMMM d"),day=parseInt(dtfilter.slice(-2)),relevantDigits=30>day?day%20:day%30,suffix=3>=relevantDigits?suffixes[relevantDigits]:suffixes[0],dateArray=dtfilter.split(" "),month=dateArray[0];return dateArray[1]+suffix+" "+month+" "+$filter("date")(input,"yyyy")}}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("favourites").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("favourites",{url:"/favourites",templateUrl:"modules/favourites/views/favourites.client.view.html"}).state("animeFavourites",{url:"/animefavourites",templateUrl:"modules/favourites/views/anime-favourites.client.view.html"}).state("mangaFavourites",{url:"/mangafavourites",templateUrl:"modules/favourites/views/manga-favourites.client.view.html"}).state("characterFavourites",{url:"/characterfavourites",templateUrl:"modules/favourites/views/character-favourites.client.view.html"})}]),angular.module("favourites").controller("FavouritesController",["$scope","Authentication","$window","$sce","Animeitems","Mangaitems","$location",function($scope,Authentication,$window,$sce,Animeitems,Mangaitems,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.today=(new Date).toISOString(),$scope.saved=localStorage.getItem("favouriteAnimeitems"),$scope.favouriteAnimeitem=null!==localStorage.getItem("favouriteAnimeitems")?JSON.parse($scope.saved):[{rank:"1",date:$scope.today,anime:{title:"Favourite Anime 1"}},{rank:"2",date:$scope.today,anime:{title:"Favourite Anime 2"}},{rank:"3",date:$scope.today,anime:{title:"Favourite Anime 3"}},{rank:"4",date:$scope.today,anime:{title:"Favourite Anime 4"}},{rank:"5",date:$scope.today,anime:{title:"Favourite Anime 5"}}],localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.saved=localStorage.getItem("favouriteMangaitems"),$scope.favouriteMangaitem=null!==localStorage.getItem("favouriteMangaitems")?JSON.parse($scope.saved):[{rank:"1",date:$scope.today,manga:{title:"Favourite Manga 1"}},{rank:"2",date:$scope.today,manga:{title:"Favourite Manga 2"}},{rank:"3",date:$scope.today,manga:{title:"Favourite Manga 3"}},{rank:"4",date:$scope.today,manga:{title:"Favourite Manga 4"}},{rank:"5",date:$scope.today,manga:{title:"Favourite Manga 5"}}],localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.findManga=function(){$scope.mangaitems=Mangaitems.query()},$scope.addFavourite=function(type){"anime"===type?$scope.favouriteAnimeitem.length<5?($scope.favouriteAnimeitem.push({date:$scope.today,anime:$scope.favourite}),localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.favourite=""):alert("Only allowed 5 favourites! Remove one."):"manga"===type&&($scope.favouriteMangaitem.length<5?($scope.favouriteMangaitem.push({date:$scope.today,manga:$scope.favourite}),localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.favourite=""):(alert("Only allowed 5 favourites! Remove one."),console.log("here")))},$scope.removeFavourite=function(kill){var deletingItem,removal=$window.confirm("Are you sure you want to delete this task?");void 0!==kill.anime?(deletingItem=$scope.favouriteAnimeitem,$scope.favouriteAnimeitem=[],removal&&(angular.forEach(deletingItem,function(item){item!==kill&&$scope.favouriteAnimeitem.push(item)}),localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)))):void 0!==kill.manga&&(deletingItem=$scope.favouriteMangaitem,$scope.favouriteMangaitem=[],removal&&(angular.forEach(deletingItem,function(item){item!==kill&&$scope.favouriteMangaitem.push(item)}),localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem))))},$scope.reorderFavourites=function(favourite){if($scope.selectedFavourite===favourite)$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0;else if(void 0===$scope.selectedFavourite)$scope.selectedFavourite=favourite;else{$scope.selectedFavouriteTwo=favourite;var ind1,ind2,hold;void 0!==$scope.selectedFavourite.anime?(ind1=$scope.favouriteAnimeitem.indexOf($scope.selectedFavourite),ind2=$scope.favouriteAnimeitem.indexOf($scope.selectedFavouriteTwo),hold=$scope.favouriteAnimeitem[ind1],$scope.favouriteAnimeitem[ind1]=$scope.favouriteAnimeitem[ind2],$scope.favouriteAnimeitem[ind2]=hold,localStorage.setItem("favouriteAnimeitems",JSON.stringify($scope.favouriteAnimeitem)),$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0):void 0!==$scope.selectedFavourite.manga&&(ind1=$scope.favouriteMangaitem.indexOf($scope.selectedFavourite),ind2=$scope.favouriteMangaitem.indexOf($scope.selectedFavouriteTwo),hold=$scope.favouriteMangaitem[ind1],$scope.favouriteMangaitem[ind1]=$scope.favouriteMangaitem[ind2],$scope.favouriteMangaitem[ind2]=hold,localStorage.setItem("favouriteMangaitems",JSON.stringify($scope.favouriteMangaitem)),$scope.selectedFavourite=void 0,$scope.selectedFavouriteTwo=void 0)}}}]),angular.module("favourites").directive("favouriteBack",function(){return function(scope,element,attrs){var url=attrs.favouriteBack;element.css({"background-image":"url("+url+")","background-size":"100%","background-repeat":"no-repeat","background-position":"right"})}}),angular.module("history").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("history",{url:"/history",templateUrl:"modules/history/views/history.client.view.html"})}]),angular.module("history").controller("HistoryController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","HistoryService","ListService",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,HistoryService,ListService){function getAnimeitems(){$scope.animeitems=Animeitems.query()}function getMangaitems(){$scope.mangaitems=Mangaitems.query()}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.view="Anime",$scope.isLoading=!0,$scope.buildHistory=function(){getAnimeitems(),getMangaitems()},$scope.$watch("view",function(newValue){void 0!==$scope.view&&"Anime"!==newValue&&"Manga"!==newValue&&($scope.view="Anime")}),$scope.$watchCollection("animeitems",function(){void 0!==$scope.animeitems&&($scope.animeHistory=HistoryService.buildHistoryList($scope.animeitems))}),$scope.$watchCollection("mangaitems",function(){void 0!==$scope.mangaitems&&($scope.mangaHistory=HistoryService.buildHistoryList($scope.mangaitems))}),$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.happenedWhen=function(when){return HistoryService.happenedWhen(when)},$scope.isGroupHeader=function(groupBuilder,item){return HistoryService.getGroupHeaders(groupBuilder,item)},$scope.$watchCollection("orderedAnimeHistory",function(newValue){void 0!==newValue&&($scope.groupAnimeBuilder=HistoryService.buildGroups(newValue))}),$scope.$watchCollection("orderedMangaHistory",function(newValue){void 0!==newValue&&($scope.groupMangaBuilder=HistoryService.buildGroups(newValue))})}]),angular.module("history").service("HistoryService",["moment",function(moment){this.buildHistoryList=function(items){var itemHistory=[],today=moment(new Date).startOf("day");return angular.forEach(items,function(item){angular.forEach(item.meta.history,function(history){var cutoff=moment(history.date).startOf("day"),diff=today.diff(cutoff,"days");28>diff&&itemHistory.push({date:history.date,value:history.value,title:item.title,id:item._id})})}),itemHistory},this.happenedWhen=function(when){var today=moment(new Date).startOf("day"),thisDate=moment(when).startOf("day"),diff=today.diff(thisDate,"days");return 0===diff?"Today":1===diff?"Yesterday":diff+" days ago."},this.buildGroups=function(items){var groupBuilder={today:[],yesterday:[],thisWeek:[],lastWeek:[],twoWeek:[],threeWeek:[]};return angular.forEach(items,function(item){var today=moment(new Date).startOf("day"),itemDate=moment(item.date).startOf("day"),diff=today.diff(itemDate,"days");0===diff?0===groupBuilder.today.length?(groupBuilder.today.push(item),groupBuilder.today.count=1):groupBuilder.today.count++:1===diff?0===groupBuilder.yesterday.length?(groupBuilder.yesterday.push(item),groupBuilder.yesterday.count=1):groupBuilder.yesterday.count++:diff>1&&7>diff?0===groupBuilder.thisWeek.length?(groupBuilder.thisWeek.push(item),groupBuilder.thisWeek.count=1):groupBuilder.thisWeek.count++:diff>6&&14>diff?0===groupBuilder.lastWeek.length?(groupBuilder.lastWeek.push(item),groupBuilder.lastWeek.count=1):groupBuilder.lastWeek.count++:diff>13&&21>diff?0===groupBuilder.twoWeek.length?(groupBuilder.twoWeek.push(item),groupBuilder.twoWeek.count=1):groupBuilder.twoWeek.count++:diff>20&&28>diff&&(0===groupBuilder.threeWeek.length?(groupBuilder.threeWeek.push(item),groupBuilder.threeWeek.count=1):groupBuilder.threeWeek.count++)}),groupBuilder},this.getGroupHeaders=function(groupBuilder,item){return void 0!==groupBuilder?groupBuilder.today.indexOf(item)>-1?"Today ("+groupBuilder.today.count+")":groupBuilder.yesterday.indexOf(item)>-1?"Yesterday ("+groupBuilder.yesterday.count+")":groupBuilder.thisWeek.indexOf(item)>-1?"This week ("+groupBuilder.thisWeek.count+")":groupBuilder.lastWeek.indexOf(item)>-1?"Last week ("+groupBuilder.lastWeek.count+")":groupBuilder.twoWeek.indexOf(item)>-1?"Two weeks ago ("+groupBuilder.twoWeek.count+")":groupBuilder.threeWeek.indexOf(item)>-1?"Three weeks ago ("+groupBuilder.threeWeek.count+")":null:null}}]),angular.module("mangaitems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Mangaitems","mangaitems","dropdown","/mangaitems(/create)?"),Menus.addSubMenuItem("topbar","mangaitems","List Mangaitems","mangaitems"),Menus.addSubMenuItem("topbar","mangaitems","New Mangaitem","mangaitems/create")}]),angular.module("mangaitems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMangaitems",{url:"/mangaitems",templateUrl:"modules/mangaitems/views/list-mangaitems.client.view.html"}).state("createMangaitem",{url:"/mangaitems/create",templateUrl:"modules/mangaitems/views/create-mangaitem.client.view.html"}).state("viewMangaitem",{url:"/mangaitems/:mangaitemId",templateUrl:"modules/mangaitems/views/view-mangaitem.client.view.html"}).state("editMangaitem",{url:"/mangaitems/:mangaitemId/edit",templateUrl:"modules/mangaitems/views/edit-mangaitem.client.view.html"})}]),angular.module("mangaitems").controller("MangaitemsController",["$scope","$stateParams","$location","Authentication","Mangaitems","Animeitems","fileUpload","$sce","$window","ItemService","ListService",function($scope,$stateParams,$location,Authentication,Mangaitems,Animeitems,fileUpload,$sce,$window,ItemService,ListService){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.whichController="mangaitem",$scope.isLoading=!0,$scope.currentPage=0,$scope.pageSize=10,$scope.pageCount=0,$scope.$watch("showingCount",function(){var pagingDetails=ListService.numberOfPages($scope.showingCount,$scope.pageSize,$scope.currentPage);$scope.currentPage=pagingDetails.currentPage,$scope.pageCount=pagingDetails.pageCount}),$scope.itemUpdate=(new Date).toISOString().substring(0,10),$scope.sortOptions=[{v:"title",n:"Title"},{v:"chapters",n:"Chapters"},{v:"volumes",n:"Volumes"},{v:"start",n:"Start date"},{v:"end",n:"End date"},{v:["latest","meta.updated"],n:"Latest"},{v:"rating",n:"Rating"}],$scope.sortReverse=!0,$scope.finalNumbers=!1,$scope.ratingLevel=void 0,$scope.maxRating=10,$scope.imgExtension="",$scope.imgPath="",$scope.tagArray=[],$scope.tagArrayRemove=[],$scope.usedTags=[],$scope.statTags=[],$scope.areTagless=!1,$scope.taglessItem=!1,$scope.trustAsResourceUrl=function(url){return $sce.trustAsResourceUrl(url)},$scope.searchTags="",$scope.passTag=function(tag){-1===$scope.searchTags.indexOf(tag)&&($scope.searchTags+=tag+",",$scope.tagsForFilter=$scope.searchTags.substring(0,$scope.searchTags.length-1).split(","))},$scope.addTag=function(){$scope.tagArray=ListService.addTag($scope.tagArray,$scope.newTag),$scope.newTag=""},$scope.$watchCollection("mangaitems",function(){if(void 0!==$scope.mangaitems){$scope.areTagless=ListService.checkForTagless($scope.mangaitems);var maxTagCount=ItemService.maxTagCount($scope.mangaitems);$scope.statTags=ItemService.buildStatTags($scope.mangaitems,maxTagCount,0)}}),$scope.hoveringOver=function(value){$scope.overStar=value,$scope.percent=100*(value/$scope.maxRating)},$scope.create=function(){var mangaitem=new Mangaitems;mangaitem=new Mangaitems(void 0!==this.anime&&null!==this.anime?{title:this.title,chapters:this.chapters,volumes:this.volumes,start:this.start,latest:this.latest,finalChapter:this.finalChapter,finalVolume:this.finalVolume,hardcopy:this.hardcopy,anime:this.anime._id,tags:$scope.tagArray,user:this.user}:{title:this.title,chapters:this.chapters,volumes:this.volumes,start:this.start,latest:this.latest,finalChapter:this.finalChapter,finalVolume:this.finalVolume,hardcopy:this.hardcopy,anime:this.anime,tags:$scope.tagArray,user:this.user}),mangaitem.$save(function(response){$location.path("/mangaitems/"+response._id),$scope.title="",$scope.chapters="",$scope.volumes="",$scope.start="",$scope.latest="",$scope.status="",$scope.tags=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(mangaitem){var removal=$window.confirm("Are you sure you want to delete this item?");if(removal)if(mangaitem){mangaitem.$remove();for(var i in $scope.mangaitems)$scope.mangaitems[i]===mangaitem&&$scope.mangaitems.splice(i,1)}else $scope.mangaitem.$remove(function(){$location.path("/mangaitems")})},$scope.update=function(){var mangaitem=$scope.mangaitem;null!==$scope.mangaitem.anime&&void 0!==$scope.mangaitem.anime&&(mangaitem.anime=$scope.mangaitem.anime._id),void 0!==$scope.tagArray&&(mangaitem.tags=ListService.concatenateTagArrays(mangaitem.tags,$scope.tagArray)),mangaitem=ItemService.itemHistory(mangaitem,$scope.updateHistory,"manga"),void 0!==$scope.imgPath&&null!==$scope.imgPath&&""!==$scope.imgPath&&(mangaitem.image=$scope.imgPath),mangaitem.chapters===mangaitem.finalChapter&&mangaitem.volumes===mangaitem.finalVolume&&0!==mangaitem.finalChapter?void 0===mangaitem.end&&(mangaitem.end=mangaitem.latest.substring(0,10)):mangaitem.reReading===!1&&(mangaitem.end=null),void 0!==mangaitem.end&&null!==mangaitem.end?mangaitem.status=!0:mangaitem.status=!1,mangaitem.reReading===!0&&mangaitem.chapters===mangaitem.finalChapter&&mangaitem.volumes===mangaitem.finalVolume&&(mangaitem.reReadCount+=1,mangaitem.reReading=!1),mangaitem.$update(function(){$location.path("/mangaitems")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.mangaitems=Mangaitems.query()},$scope.findOne=function(){$scope.mangaitem=Mangaitems.get({mangaitemId:$stateParams.mangaitemId})},$scope.findAnime=function(){$scope.animeitems=Animeitems.query()},$scope.uploadFile=function(){$scope.imgPath="/modules/mangaitems/img/"+$scope.myFile.name,fileUpload.uploadFileToUrl($scope.myFile,"/fileUpload")},$scope.latestDate=function(latest,updated){return ItemService.latestDate(latest,updated)},$scope.loading=function(value){$scope.isLoading=ListService.loader(value)}}]),angular.module("mangaitems").factory("Mangaitems",["$resource",function($resource){return $resource("mangaitems/:mangaitemId",{mangaitemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("statistics").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/signin"),$stateProvider.state("statistics",{url:"/statistics",templateUrl:"modules/statistics/views/statistics.client.view.html"})}]),angular.module("statistics").controller("StatisticsController",["$scope","$stateParams","$location","Authentication","Animeitems","Mangaitems","Characters","ListService","ItemService",function($scope,$stateParams,$location,Authentication,Animeitems,Mangaitems,Characters,ListService,ItemService){function getItems(view){"Anime"===view?$scope.items=Animeitems.query():"Manga"===view?$scope.items=Mangaitems.query():"Character"===view&&($scope.items=Characters.query())}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/signin"),$scope.view="Anime",$scope.historicalView="month",$scope.maxCount=0,$scope.maxRatedCount=0,$scope.averageRating=0,$scope.maxCompleteMonth=0,$scope.seasons=[{number:"03",text:"Winter"},{number:"06",text:"Spring"},{number:"09",text:"Summer"},{number:"12",text:"Fall"}],$scope.months=[{number:"01",text:"January"},{number:"02",text:"February"},{number:"03",text:"March"},{number:"04",text:"April"},{number:"05",text:"May"},{number:"06",text:"June"},{number:"07",text:"July"},{number:"08",text:"August"},{number:"09",text:"September"},{number:"10",text:"October"},{number:"11",text:"November"},{number:"12",text:"December"}],$scope.showDetail=!1,$scope.statTagSortType="count",$scope.statTagSortReverse=!0,$scope.statTagDetailSortType="count",$scope.statTagDetailSortReverse=!0,$scope.statSeriesSortType="count",$scope.statSeriesSortReverse=!0,$scope.statTags=[],$scope.showTagDetail=!1,$scope.statSearch="",$scope.statSeries=[],$scope.showSeriesDetail=!1,$scope.seriesSearch="",$scope.areTagless=!1,$scope.taglessItem=!1,$scope.male=0,$scope.female=0,$scope.nosex=0,$scope.isLoading=!0,$scope.loading=function(value){$scope.isLoading=ListService.loader(value)},$scope.find=function(view){getItems(view)},$scope.$watch("view",function(newValue){void 0!==$scope.view&&(getItems(newValue),$scope.historicalView="month",$scope.statSearch="",$scope.showDetail=!1)}),$scope.$watchCollection("items",function(){if("Character"!==$scope.view){if(void 0!==$scope.items){$scope.statTags=[],$scope.maxCompleteMonth=ItemService.maxCompleteMonth($scope.items),$scope.completeByMonth=ItemService.completeByMonth($scope.items),"Anime"===$scope.view&&($scope.completeBySeason=ItemService.completeBySeason($scope.items)),$scope.maxCount=$scope.items.length;var tempRating=0;$scope.maxRatedCount=0,angular.forEach($scope.items,function(item){0!==item.rating&&(tempRating+=item.rating,$scope.maxRatedCount++)}),$scope.averageRating=tempRating/$scope.maxRatedCount;var maxTagCount=ItemService.maxTagCount($scope.items);$scope.statTags=ItemService.buildStatTags($scope.items,maxTagCount,$scope.averageRating)}}else if("Character"===$scope.view&&void 0!==$scope.items){$scope.statTags=[],$scope.maxCount=$scope.items.length;var add=!0;angular.forEach($scope.items,function(item){angular.forEach(item.tags,function(tag){for(var i=0;i<$scope.statTags.length;i++)$scope.statTags[i].tag===tag.text&&(add=!1,$scope.statTags[i].count+=1);add===!0&&$scope.statTags.push({tag:tag.text,count:1}),add=!0})}),angular.forEach($scope.items,function(item){for(var i=0;i<$scope.statSeries.length;i++)null!==item.anime?$scope.statSeries[i].name===item.anime.title&&(add=!1,$scope.statSeries[i].count+=1):null!==item.manga&&$scope.statSeries[i].name===item.manga.title&&(add=!1,$scope.statSeries[i].count+=1);add===!0&&(null!==item.anime?$scope.statSeries.push({name:item.anime.title,count:1}):null!==item.manga&&$scope.statSeries.push({name:item.manga.title,count:1})),add=!0}),angular.forEach($scope.statTags,function(stat){"male"===stat.tag?$scope.male=stat.count:"female"===stat.tag&&($scope.female=stat.count)}),$scope.nosex=$scope.maxCount-$scope.male-$scope.female}}),$scope.seasonDetail=function(year,month){$scope.detailSeasonYear===year&&$scope.detailSeason===month?($scope.showSeasonDetail=!$scope.showSeasonDetail,$scope.showDetail=!1):($scope.detailSeasonYear=year,$scope.detailSeason=month,angular.forEach($scope.seasons,function(mmm){$scope.detailSeason===mmm.number&&($scope.detailSeasonName=mmm.text)}),$scope.showSeasonDetail=!0,$scope.showDetail=!1)},$scope.monthDetail=function(year,month){$scope.detailYear===year&&$scope.detailMonth===month?($scope.showDetail=!$scope.showDetail,$scope.showSeasonDetail=!1):($scope.detailYear=year,$scope.detailMonth=month,angular.forEach($scope.months,function(mmm){$scope.detailMonth===mmm.number&&($scope.detailMonthName=mmm.text)}),$scope.showDetail=!0,$scope.showSeasonDetail=!1)},$scope.tagDetail=function(name){if($scope.detailTagName===name)$scope.statSearch="",$scope.showTagDetail=!1,$scope.detailTagName="",$scope.isEqual=!1;else{$scope.statSearch=name,$scope.detailTagName=name,$scope.isEqual=!0,$scope.showTagDetail=!0,$scope.tagDetailCollection=[],$scope.tagDetailResult=[];var add=!0;angular.forEach($scope.items,function(item){for(var i=0;i<item.tags.length;i++)item.tags[i].text===name&&$scope.tagDetailCollection.push(item.tags)}),angular.forEach($scope.tagDetailCollection,function(item){angular.forEach(item,function(tem){for(var i=0;i<$scope.tagDetailResult.length;i++)$scope.tagDetailResult[i].name===tem.text&&tem.text!==name&&(add=!1,$scope.tagDetailResult[i].count+=1);add===!0&&tem.text!==name&&$scope.tagDetailResult.push({name:tem.text,count:1}),add=!0})})}},$scope.seriesDetail=function(name){$scope.detailSeriesName===name?($scope.seriesSearch="",$scope.showSeriesDetail=!1,$scope.detailSeriesName=""):($scope.seriesSearch=name,$scope.detailSeriesName=name,$scope.showSeriesDetail=!0)}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/signin")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$scope.credentials.username="username",$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$scope.loginBody=!0,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);